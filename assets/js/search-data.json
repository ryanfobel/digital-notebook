{
  
    
        "post0": {
            "title": "Hot water heater case study",
            "content": "Open an interactive version of this notebook by clicking on this button: . %load_ext autoreload %autoreload 2 try: import utility_bill_scraper except ModuleNotFoundError: import subprocess import sys cmd = ( f&quot;{sys.executable} -m pip install --upgrade --upgrade-strategy &quot; &quot;only-if-needed &quot; &quot;git+https://github.com/ryanfobel/utility-bill-scraper.git&quot; ) subprocess.check_output(cmd, stderr=subprocess.STDOUT, shell=True).decode(&quot;utf-8&quot;) %matplotlib inline import datetime as dt import os import sys import arrow from cycler import cycler from dotenv import load_dotenv import matplotlib.pyplot as plt import numpy as np import pandas as pd from utility_bill_scraper import LIGHT_COLORMAP import utility_bill_scraper.canada.on.kitchener_wilmot_hydro as kwh import utility_bill_scraper.canada.on.kitchener_utilities as ku from utility_bill_scraper import GAS_KGCO2_PER_CUBIC_METER, GAS_KWH_PER_CUBIC_METER # Plotting preferences plt.rc(&quot;axes&quot;, prop_cycle=cycler(&quot;color&quot;, LIGHT_COLORMAP)) figsize = (12, 6) bin_width = 0.9 alpha = 0.5 transparent = False bbox_inches = &quot;tight&quot; facecolor = &quot;white&quot; title_size=30 ylabel_size=30 legend_size=25 font_size=25 # Load the `.env` file into the environment if it exists load_dotenv() MAP = { ku.NAME: ku.KitchenerUtilitiesAPI, kwh.NAME: kwh.KitchenerWilmotHydroAPI, } . The autoreload extension is already loaded. To reload it, use: %reload_ext autoreload . try: api = {} updates = {} for utility_name in MAP.keys(): kwargs = { &quot;data_path&quot;: os.getenv(&quot;DATA_PATH&quot;, os.path.join(&quot;..&quot;, &quot;..&quot;, &quot;..&quot;, &quot;data&quot;)), &quot;google_sa_credentials&quot;: os.getenv(&quot;GOOGLE_SA_CREDENTIALS&quot;), &quot;browser&quot;: os.getenv(&quot;BROWSER&quot;, &quot;Firefox&quot;), &quot;headless&quot;: True, } if utility_name == &quot;Kitchener-Wilmot Hydro&quot;: kwargs[&quot;user&quot;] = os.getenv(&quot;KWHYDRO_USER&quot;) kwargs[&quot;password&quot;] = os.getenv(&quot;KWHYDRO_PASSWORD&quot;) elif utility_name == &quot;Kitchener Utilities&quot;: kwargs[&quot;user&quot;] = os.getenv(&quot;KITCHENER_UTILITIES_USER&quot;) kwargs[&quot;password&quot;] = os.getenv(&quot;KITCHENER_UTILITIES_PASSWORD&quot;) api[utility_name] = MAP[utility_name](**kwargs) #updates[utility_name] = api[utility_name].update(24) #if updates[utility_name] is not None: # print(f&quot;{ utility_name }: { len(updates[utility_name]) } statements_downloaded&quot;) # Resample monthly data to end of month (ignore last sample because it is a duplicate due to interpolation) electricity = api[kwh.NAME].history(&quot;monthly&quot;).resample(&#39;D&#39;).interpolate().resample(&#39;M&#39;).interpolate()[:-1] electricity.to_csv(&quot;case_study_data/electricity.csv&quot;) gas = api[ku.NAME].history(&quot;monthly&quot;).resample(&#39;D&#39;).interpolate().resample(&#39;M&#39;).interpolate()[:-1] gas.to_csv(&quot;case_study_data/gas.csv&quot;) except: # Load data from github electricity = pd.read_csv(&quot;https://raw.githubusercontent.com/ryanfobel/utility-bill-scraper/main/notebooks/features/case_study_data/electricity.csv&quot;, index_col=&quot;Date&quot;) gas = pd.read_csv(&quot;https://raw.githubusercontent.com/ryanfobel/utility-bill-scraper/main/notebooks/features/case_study_data/gas.csv&quot;, index_col=&quot;Date&quot;) . Calculate CO$_2$ emissions . gas[&quot;kgCO2&quot;] = gas[&quot;Gas Consumption&quot;] * GAS_KGCO2_PER_CUBIC_METER # Carbon intensity of electricity generation in Ontario (40-77 g CO2 / kWh) # * 40 g / kWh (https://www.neb-one.gc.ca/nrg/sttstc/lctrct/rprt/ # 2017cndrnwblpwr/ghgmssn-eng.html) # * 77 g / kWh (https://www.conferenceboard.ca/hcp/provincial/environment/ # low-emitting-electricity-production.aspx) # * This is likely to go up when Pickering is closed # https://www.opg.com/darlington-refurbishment/Documents/IntrinsikReport_GHG_OntarioPower.pdf carbon_intensity_kgCO2_per_kwh = 0.077 electricity[&quot;kgCO2&quot;] = electricity[&quot;Total Consumption&quot;] * carbon_intensity_kgCO2_per_kwh . Electricity consumption . tco2 = pd.DataFrame() tco2[&quot;Gas&quot;] = gas[&quot;kgCO2&quot;] / 1e3 tco2[&quot;Electricity&quot;] = electricity[&quot;kgCO2&quot;] / 1e3 cost = pd.DataFrame() cost[&quot;Gas&quot;] = gas[&quot;Gas Charges&quot;] cost[&quot;Electricity&quot;] = electricity[&quot;Total&quot;] usage = pd.DataFrame() usage[&quot;Gas&quot;] = gas[&quot;Gas Consumption&quot;] * GAS_KWH_PER_CUBIC_METER usage[&quot;Electricity&quot;] = electricity[&quot;Total Consumption&quot;] try: water_heater_install = [i for i, date in enumerate(tco2.index) if date.isoformat()[:7] == &quot;2020-06&quot;][0] except AttributeError: water_heater_install = [i for i, date in enumerate(tco2.index) if date[:7] == &quot;2020-06&quot;][0] plt.figure() electricity[[&quot;On Peak Consumption&quot;, &quot;Mid Peak Consumption&quot;, &quot;Off Peak Consumption&quot;]].plot.bar( stacked=True, width=bin_width, color=[&quot;#F07E6E&quot;, &quot;#EDDD46&quot;, &quot;#90CD97&quot;], figsize=figsize, ) plt.ylim((0, None)) plt.yticks(np.arange(0, 2000, step=500), [&quot;{:,}&quot;.format(tic) for tic in np.arange(0, 2000, step=500)], fontsize=30, ); plt.title(&quot;Monthly Electricity Consumption&quot;, fontsize=title_size) plt.xlabel(&quot;&quot;) plt.ylabel(&quot;kWh&quot;, fontsize=ylabel_size) plt.legend([&quot;Off Peak&quot;, &quot;Mid Peak&quot;, &quot;On Peak&quot;, &quot;Total&quot;], fontsize=20, loc=&quot;upper left&quot;) os.makedirs(&quot;images&quot;, exist_ok=True) locs, labels = plt.xticks() plt.xticks(locs, labels=[label.get_text()[:7] for label in labels]); plt.plot([water_heater_install, water_heater_install], plt.ylim(), &#39;k--&#39;) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;monthly_electricity_consumption.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . &lt;Figure size 432x288 with 0 Axes&gt; . Gas consumption . plt.figure() gas[&quot;Gas Consumption&quot;].plot.bar( width=bin_width, figsize=figsize, ) plt.ylim((0, None)) plt.title(&quot;Monthly Gas Consumption&quot;, fontsize=title_size) plt.ylabel(&quot;m$^3$&quot;, fontsize=ylabel_size) os.makedirs(&quot;images&quot;, exist_ok=True) plt.yticks(np.arange(0, 500, step=100), [&quot;{:,}&quot;.format(tic) for tic in np.arange(0, 500, step=100)], fontsize=30, ); plt.xlabel(&quot;&quot;) locs, labels = plt.xticks() plt.xticks(locs, labels=[label.get_text()[:7] for label in labels]) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;monthly_gas_consumption.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Energy consumption . plt.figure() daily = usage.copy() try: days_in_month = daily.index.day except: days_in_month = np.array([int(date[-2:]) for date in daily.index]) daily[&quot;Gas&quot;] = daily[&quot;Gas&quot;] / days_in_month daily[&quot;Electricity&quot;] = daily[&quot;Electricity&quot;] / days_in_month daily.plot.bar( stacked=True, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], width=bin_width, figsize=figsize, legend=None, ); xlocs, xlabels = plt.xticks() plt.xticks(xlocs, labels=[label.get_text()[:7] for label in xlabels]); plt.title(&quot;Average Daily Energy Consumption&quot;, fontsize=title_size) plt.xlabel(&quot;&quot;) plt.legend(bbox_to_anchor=(1, 1.04), fontsize=25) plt.ylabel(&quot;kWh/day&quot;, fontsize=ylabel_size) plt.ylim((0, None)) ylocs, ylabels = plt.yticks() plt.yticks(ylocs, [int(tic) for tic in ylocs], fontsize=30, ) os.makedirs(&quot;images&quot;, exist_ok=True) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;daily_energy_consumption.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . &lt;Figure size 432x288 with 0 Axes&gt; . Monthly operating cost . tco2 = pd.DataFrame() tco2[&quot;Gas&quot;] = gas[&quot;kgCO2&quot;] / 1e3 tco2[&quot;Electricity&quot;] = electricity[&quot;kgCO2&quot;] / 1e3 cost = pd.DataFrame() cost[&quot;Gas&quot;] = gas[&quot;Gas Charges&quot;] cost[&quot;Electricity&quot;] = electricity[&quot;Total&quot;] cost.plot.bar( stacked=True, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], width=bin_width, fontsize=11, figsize=figsize, legend=None, ) xlocs, xlabels = plt.xticks() plt.xticks(xlocs, labels=[label.get_text()[:7] for label in xlabels]); plt.title(&quot;Monthly operating cost&quot;, fontsize=title_size) plt.xlabel(&quot;&quot;) plt.legend(bbox_to_anchor=(1, 1.04), fontsize=25) plt.yticks(np.arange(0, 300, step=100), [f&quot;${ tic }&quot; for tic in np.arange(0, 300, step=100)], fontsize=30, ); plt.ylim((0, 250)) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;monthly_operating_cost.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Monthly CO$_2$ emissions . tco2.plot.bar( stacked=True, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], width=bin_width, fontsize=30, ylabel=&quot;tCO$_2$e&quot;, figsize=figsize, ) plt.legend( #bbox_to_anchor=(1, 1.04), fontsize=25 ) plt.title(&quot;Monthly CO$_2$ emissions&quot;, fontsize=title_size) plt.ylabel(&quot;Tons&quot;, fontsize=30) xlocs, xlabels = plt.xticks() plt.xticks(xlocs, labels=[label.get_text()[:7] for label in xlabels], fontsize=11, ); plt.xlabel(&quot;&quot;) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;monthly_emissions.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Average energy cost . (100 * cost[&quot;Electricity&quot;] / usage[&quot;Electricity&quot;]).plot.bar( width=bin_width, fontsize=11, color=[&quot;#90cd97&quot;], figsize=figsize, legend=None, ) (100 * cost[&quot;Gas&quot;] / usage[&quot;Gas&quot;]).plot.bar( width=bin_width, color=[&quot;#8c8c8c&quot;], fontsize=11, figsize=figsize, ) plt.ylabel(&quot;¢/kWh&quot;, fontsize=30) xlocs, xlabels = plt.xticks() plt.xticks(xlocs, labels=[label.get_text()[:7] for label in xlabels]); ylocs, ylabels = plt.yticks() plt.yticks(ylocs, [int(y) for y in ylocs], fontsize=25) plt.plot(xlocs, 100 * (cost[&quot;Gas&quot;] + cost[&quot;Electricity&quot;]) / (usage[&quot;Gas&quot;] + usage[&quot;Electricity&quot;]), &quot;k&quot;) plt.title(&quot;Average energy cost&quot;, fontsize=title_size) plt.xlabel(&quot;&quot;); ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.ylim([0, None]) plt.legend( [&quot;Blended&quot;, &quot;Electricity&quot;, &quot;Gas&quot;], #bbox_to_anchor=(1, 1.04), fontsize=25 ) plt.savefig( os.path.join(&quot;images&quot;, &quot;average_energy_cost.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Annual CO$_2$ emissions . try: tco2[&quot;year&quot;] = [date.year for date in tco2.index] cost[&quot;year&quot;] = [date.year for date in cost.index] except: tco2[&quot;year&quot;] = [int(date[:4]) for date in tco2.index] cost[&quot;year&quot;] = [int(date[:4]) for date in cost.index] tco2[tco2[&quot;year&quot;] &gt; 2017].groupby(&quot;year&quot;).sum().plot.bar( stacked=True, fontsize=font_size, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], width=bin_width, figsize=figsize, legend=None, ) plt.title(&quot;Annual CO$_2$e emissions&quot;, fontsize=title_size) plt.ylabel(&quot;Tons&quot;, fontsize=ylabel_size) os.makedirs(&quot;images&quot;, exist_ok=True) plt.xlabel(&quot;&quot;) #plt.legend(bbox_to_anchor=(1, 1.04), fontsize=legend_size) plt.xticks(rotation=0) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;annual_co2_emissions.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Annual operating costs . cost[cost[&quot;year&quot;] &gt; 2017].groupby(&quot;year&quot;).sum().plot.bar( stacked=True, fontsize=font_size, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], width=bin_width, figsize=figsize, legend=None, ) plt.title(&quot;Annual operating costs&quot;, fontsize=title_size) os.makedirs(&quot;images&quot;, exist_ok=True) plt.xlabel(&quot;&quot;) #plt.legend(bbox_to_anchor=(1, 1.04), fontsize=legend_size) plt.xticks(rotation=0) plt.yticks(np.arange(0, 2500, step=500), [&quot;${:,}&quot;.format(tic) for tic in np.arange(0, 2500, step=500)], fontsize=30, ); ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;annual_operating_costs.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Comparing the 12 months before and after installing the HW heater . water_heater_install_date = &quot;2020-06-16&quot; after_idx = [i for i, date in enumerate(tco2.index) if arrow.get(date).naive &gt; arrow.get(water_heater_install_date).naive] before_idx = [i for i, date in enumerate(tco2.index) if arrow.get(date).naive &lt; arrow.get(water_heater_install_date).naive] . comparison = pd.DataFrame() comparison[&quot;tco2_Gas&quot;] = tco2[&quot;Gas&quot;].iloc[before_idx[-12:] + after_idx[:12]].copy() comparison[&quot;tco2_Electricity&quot;] = tco2[&quot;Electricity&quot;].iloc[before_idx[-12:] + after_idx[:12]].copy() comparison[&quot;tco2_Total&quot;] = comparison[&quot;tco2_Gas&quot;] + comparison[&quot;tco2_Electricity&quot;] comparison[&quot;cost_Gas&quot;] = cost[&quot;Gas&quot;].iloc[before_idx[-12:] + after_idx[:12]].copy() comparison[&quot;cost_Electricity&quot;] = cost[&quot;Electricity&quot;].iloc[before_idx[-12:] + after_idx[:12]].copy() comparison[&quot;cost_Total&quot;] = comparison[&quot;cost_Gas&quot;] + comparison[&quot;cost_Electricity&quot;] comparison[&quot;usage_kwh_Gas&quot;] = (gas[&quot;Gas Consumption&quot;] * GAS_KWH_PER_CUBIC_METER).iloc[before_idx[-12:] + after_idx[:12]].copy() comparison[&quot;usage_kwh_Electricity&quot;] = electricity[&quot;Total Consumption&quot;].iloc[before_idx[-12:] + after_idx[:12]].copy() comparison[&quot;usage_kwh_Total&quot;] = comparison[&quot;usage_kwh_Gas&quot;] + comparison[&quot;usage_kwh_Electricity&quot;] comparison[&quot;Average_rate_Gas&quot;] = comparison[&quot;cost_Gas&quot;] / comparison[&quot;usage_kwh_Gas&quot;] comparison[&quot;Average_rate_Electricity&quot;] = comparison[&quot;cost_Electricity&quot;] / comparison[&quot;usage_kwh_Electricity&quot;] comparison[&quot;Average_rate_Blended&quot;] = comparison[&quot;cost_Total&quot;] / comparison[&quot;usage_kwh_Total&quot;] comparison[&quot;Period&quot;] = [&quot;before&quot;]*12 + [&quot;after&quot;]*12 comparison.tail() . tco2_Gas tco2_Electricity tco2_Total cost_Gas cost_Electricity cost_Total usage_kwh_Gas usage_kwh_Electricity usage_kwh_Total Average_rate_Gas Average_rate_Electricity Average_rate_Blended Period . Date . 2021-01-31 0.597326 | 0.054458 | 0.651784 | 117.850000 | 104.421724 | 222.271724 | 3347.008478 | 707.251724 | 4054.260202 | 0.035211 | 0.147644 | 0.054824 | after | . 2021-02-28 0.566027 | 0.049591 | 0.615618 | 113.085000 | 81.990000 | 195.075000 | 3171.629699 | 644.039259 | 3815.668958 | 0.035655 | 0.127306 | 0.051125 | after | . 2021-03-31 0.377104 | 0.048041 | 0.425145 | 85.033226 | 87.777647 | 172.810873 | 2113.034884 | 623.912941 | 2736.947825 | 0.040242 | 0.140689 | 0.063140 | after | . 2021-04-30 0.188676 | 0.056138 | 0.244813 | 55.290000 | 108.196667 | 163.486667 | 1057.209900 | 729.061333 | 1786.271233 | 0.052298 | 0.148405 | 0.091524 | after | . 2021-05-31 0.091764 | 0.051550 | 0.143313 | 40.144375 | 101.753214 | 141.897589 | 514.182353 | 669.476071 | 1183.658424 | 0.078074 | 0.151989 | 0.119881 | after | . CO$_2$ reduced by 0.6t (-13%) . comparison.groupby(&quot;Period&quot;).sum().sort_index(ascending=False)[[&quot;tco2_Gas&quot;, &quot;tco2_Electricity&quot;]].plot.bar( width=.98, fontsize=30, stacked=True, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], figsize=(10, 6), ); plt.xticks(rotation=0) plt.xlabel(&quot;&quot;) plt.title(&quot;CO$_2$ emissions&quot;, fontsize=50) plt.yticks(range(6)) plt.ylabel(&quot;Tons&quot;, fontsize=25) delta = np.diff(comparison.groupby(&quot;Period&quot;)[&quot;tco2_Total&quot;].sum().sort_index(ascending=False))[0] delta_pct = 100 * delta / comparison[&quot;tco2_Total&quot;][:12].sum() sign = [&quot;+&quot; if delta &gt; 0 else &quot;&quot;][0] plt.text(0.8, 3.8, &quot;%s%.01ft n%s%.0f%%&quot; % (sign, delta, sign, delta_pct), fontsize=30, ) plt.legend(labels=[&quot;Gas&quot;, &quot;Electricty&quot;], bbox_to_anchor=(1.35, 1.04), fontsize=25 ) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;compare_emissions.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Operating cost up by $422 (+26%) . comparison.groupby(&quot;Period&quot;).sum().sort_index(ascending=False)[[&quot;cost_Gas&quot;, &quot;cost_Electricity&quot;]].plot.bar( width=.98, stacked=True, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], fontsize=30, figsize=(10, 6), legend=None, ) plt.xticks(rotation=0) plt.legend(labels=[&quot;Gas&quot;, &quot;Electricty&quot;], bbox_to_anchor=(1, 1.04), fontsize=25 ) plt.title(&quot;Operating cost&quot;, fontsize=50) plt.xlabel(&quot;&quot;) plt.yticks(np.arange(0, 3000, step=500), [&quot;${:,}&quot;.format(tic) for tic in np.arange(0, 3000, step=500)], fontsize=30, ); delta = np.diff(comparison.groupby(&quot;Period&quot;)[&quot;cost_Total&quot;].sum().sort_index(ascending=False))[0] delta_pct = 100 * delta / comparison[&quot;cost_Total&quot;][:12].sum() sign = [&quot;+&quot; if delta &gt; 0 else &quot;&quot;][0] plt.text(0.8, 1300, &quot;%s $%.0f n%s%.0f%%&quot; % (sign, delta, sign, delta_pct), fontsize=30, ) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;compare_operating_cost.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Normalized operating cost up by $293 (+13%) . fixed_rate_comparison = comparison.copy() fixed_rate_comparison[&quot;cost_Gas&quot;] = fixed_rate_comparison[&quot;usage_kwh_Gas&quot;] * fixed_rate_comparison[&quot;Average_rate_Gas&quot;].mean() fixed_rate_comparison[&quot;cost_Electricity&quot;] = fixed_rate_comparison[&quot;usage_kwh_Electricity&quot;] * fixed_rate_comparison[&quot;Average_rate_Electricity&quot;].mean() fixed_rate_comparison[&quot;cost_Total&quot;] = fixed_rate_comparison[&quot;cost_Gas&quot;] + fixed_rate_comparison[&quot;cost_Electricity&quot;] fixed_rate_comparison.groupby(&quot;Period&quot;).sum().sort_index(ascending=False)[[&quot;cost_Gas&quot;, &quot;cost_Electricity&quot;]].plot.bar( width=.98, stacked=True, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], fontsize=30, figsize=(10, 6), legend=None, ) plt.xticks(rotation=0) plt.legend(labels=[&quot;Gas&quot;, &quot;Electricty&quot;], bbox_to_anchor=(1, 1.04), fontsize=25 ) plt.title(&quot;Operating cost (normalized rates)&quot;, fontsize=30) plt.xlabel(&quot;&quot;) plt.yticks(np.arange(0, 3000, step=500), [&quot;${:,}&quot;.format(tic) for tic in np.arange(0, 3000, step=500)], fontsize=30, ); delta = np.diff(fixed_rate_comparison.groupby(&quot;Period&quot;)[&quot;cost_Total&quot;].sum().sort_index(ascending=False))[0] delta_pct = 100 * delta / fixed_rate_comparison[&quot;cost_Total&quot;][:12].sum() sign = [&quot;+&quot; if delta &gt; 0 else &quot;&quot;][0] plt.text(0.8, 1600, &quot;%s $%.0f n%s%.0f%%&quot; % (sign, delta, sign, delta_pct), fontsize=30, ) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;compare_operating_cost.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Daily energy use down by 2.1kWh (-3%) . (comparison.groupby(&quot;Period&quot;).sum().sort_index(ascending=False)[[&quot;usage_kwh_Gas&quot;, &quot;usage_kwh_Electricity&quot;]] / 365).plot.bar( width=.98, stacked=True, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], fontsize=30, figsize=(10, 6), legend=None, ) plt.xticks(rotation=0) plt.legend(labels=[&quot;Gas&quot;, &quot;Electricty&quot;], bbox_to_anchor=(1, 1.04), fontsize=25 ) plt.title(&quot;Daily Energy Use&quot;, fontsize=50) plt.xlabel(&quot;&quot;) plt.ylabel(&quot;kWh/day&quot;, fontsize=25) # plt.yticks(np.arange(0, 2500, step=500), # [&quot;${:,}&quot;.format(tic) for tic in np.arange(0, 2500, step=500)], # fontsize=30, # ); delta = np.diff(comparison.groupby(&quot;Period&quot;).sum()[&quot;usage_kwh_Total&quot;].sort_index(ascending=False))[0] delta_pct = 100 * delta / comparison.usage_kwh_Total[:12].sum() sign = [&quot;+&quot; if delta &gt; 0 else &quot;&quot;][0] plt.text(0.7, 50, &quot;%s%.1fkWh n%s%.0f%%&quot; % (sign, delta / 365, sign, delta_pct), fontsize=30, ) plt.yticks(np.arange(0, 80, step=10), [&quot;{:,}&quot;.format(tic) for tic in np.arange(0, 80, step=10)], fontsize=30, ); delta = np.diff(comparison.groupby(&quot;Period&quot;).sum().sort_index(ascending=False)[&quot;usage_kwh_Electricity&quot;])[0] delta_pct = 100 * delta / comparison.groupby(&quot;Period&quot;).sum().sort_index(ascending=False)[&quot;usage_kwh_Electricity&quot;][0] sign = [&quot;+&quot; if delta &gt; 0 else &quot;&quot;][0] plt.text(1.8, 20, &quot;Electricity use n↑%.0f kWh/day n(%s%.1f%%)&quot; % (delta / 365, sign, delta_pct), fontsize=30, ) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;compare_usage.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . What units/timescale makes sense here? Daily seems to strike the right balance of immediate, short-term feedback that is meaningful (averages out hourly &quot;noise&quot;). . Blended rate up by 1.2&#162; (+14%) . (100 * (comparison.groupby(&quot;Period&quot;).mean().sort_index(ascending=False)[&quot;Average_rate_Blended&quot;])).plot.bar( width=.98, stacked=True, #color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], fontsize=30, figsize=(10, 6), legend=None, ) plt.ylabel(&quot;1/kWh&quot;, fontsize=30) plt.xticks(rotation=0) plt.title(&quot;Blended Rate&quot;, fontsize=50) plt.xlabel(&quot;&quot;) plt.yticks(np.arange(0, 10, step=2), [&quot;{:,}¢&quot;.format(tic) for tic in np.arange(0, 10, step=2)], fontsize=30, ); delta = 100 * np.diff(comparison.groupby(&quot;Period&quot;)[&quot;Average_rate_Blended&quot;].mean().sort_index(ascending=False))[0] sign = [&quot;+&quot; if delta &gt; 0 else &quot;&quot;][0] plt.text(0.8, 4.5, &quot;%s%.1f¢ n%s%.0f%%&quot; % (sign, delta, sign, (delta / comparison.iloc[:12][&#39;Average_rate_Blended&#39;].mean())), fontsize=30, ) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;compare_usage.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . The blended rate went up because we shifted some of our energy use (HW heating) from lower priced gas to higher priced electricity and because the gas rate went up by 25%. . Gas rate up by 1.5&#162; (+25%) . (100 * (comparison.groupby(&quot;Period&quot;).mean().sort_index(ascending=False)[&quot;Average_rate_Gas&quot;])).plot.bar( width=.98, stacked=True, #color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], fontsize=30, figsize=(10, 6), legend=None, ) plt.ylabel(&quot;1/kWh&quot;, fontsize=30) plt.xticks(rotation=0) plt.title(&quot;Gas Rate&quot;, fontsize=50) plt.xlabel(&quot;&quot;) plt.yticks(np.arange(0, 10, step=2), [&quot;{:,}¢&quot;.format(tic) for tic in np.arange(0, 10, step=2)], fontsize=30, ); delta = 100 * np.diff(comparison.groupby(&quot;Period&quot;)[&quot;Average_rate_Gas&quot;].mean().sort_index(ascending=False))[0] sign = [&quot;+&quot; if delta &gt; 0 else &quot;&quot;][0] plt.text(0.8, 3.5, &quot;%s%.1f¢ n%s%.0f%%&quot; % (sign, delta, sign, (delta / comparison.iloc[:12][&#39;Average_rate_Gas&#39;].mean())), fontsize=30, ) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;compare_gas_rate.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Electricity rate down by 1.8&#162; (-11%) . (100 * (comparison.groupby(&quot;Period&quot;).mean().sort_index(ascending=False)[&quot;Average_rate_Electricity&quot;])).plot.bar( width=.98, stacked=True, #color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], fontsize=30, figsize=(10, 6), legend=None, ) plt.ylabel(&quot;1/kWh&quot;, fontsize=30) plt.xticks(rotation=0) plt.title(&quot;Electricity Rate&quot;, fontsize=50) plt.xlabel(&quot;&quot;) #ylocs, ylabels = plt.yticks() ylocs = range(0,20,5) plt.yticks(ylocs, [&quot;%d¢&quot; % tic for tic in ylocs], fontsize=30, ); delta = 100 * np.diff(comparison.groupby(&quot;Period&quot;)[&quot;Average_rate_Electricity&quot;].mean().sort_index(ascending=False))[0] sign = [&quot;+&quot; if delta &gt; 0 else &quot;&quot;][0] plt.text(0.8, 6, &quot;%s%.1f¢ n%s%.0f%%&quot; % (sign, delta, sign, (delta / comparison.iloc[:12][&#39;Average_rate_Electricity&#39;].mean())), fontsize=30, ) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;compare_electricity_rate.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Cost of energy . When trying to predict future costs, a major component will be the cost of energy (best represented by the Levelized Cost of Energy; LCOE). LCOE solar in various countries is between $20-50/MWh (2-5¢/kWh) in 2021 (note that this is utility scale; rooftop residential numbers will be slightly higher and need to account for storage or grid backup). In the near future (maybe even now?), the LCOE is likely to be cheaper for rooftop generated solar versus natural gas, making heat pumps much more attractive. . This seems to be inline with the US gov SunShot goals. . .",
            "url": "https://ryanfobel.github.io/test-blog/climate/jupyter/2022/01/27/case_study.html",
            "relUrl": "/climate/jupyter/2022/01/27/case_study.html",
            "date": " • Jan 27, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Home CO2 emissions",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ryanfobel.github.io/test-blog/jupyter/2022/01/27/Home-co2-emissions.html",
            "relUrl": "/jupyter/2022/01/27/Home-co2-emissions.html",
            "date": " • Jan 27, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Download data",
            "content": ". Introduction . This notebook will help you to download pdf statements and data from a Kitchener-Wilmot Hydro account. Launch an interactive version by clicking on the Open in Colab badge at the top of this page. . try: import utility_bill_scraper except ModuleNotFoundError: import subprocess import sys cmd = ( f&quot;{sys.executable} -m pip install --upgrade --upgrade-strategy &quot; &quot;only-if-needed &quot; &quot;git+https://github.com/ryanfobel/utility-bill-scraper.git&quot; ) subprocess.check_output(cmd, stderr=subprocess.STDOUT, shell=True).decode(&quot;utf-8&quot;) from utility_bill_scraper import install_colab_dependencies install_colab_dependencies(required_envs=[&quot;KWHYDRO_USER&quot;, &quot;KWHYDRO_PASSWORD&quot;]) %matplotlib inline import datetime as dt import os import sys from cycler import cycler from dotenv import load_dotenv import matplotlib.pyplot as plt import numpy as np from utility_bill_scraper import LIGHT_COLORMAP import utility_bill_scraper.canada.on.kitchener_wilmot_hydro as kwh # Plotting preferences plt.rc(&quot;axes&quot;, prop_cycle=cycler(&quot;color&quot;, LIGHT_COLORMAP)) figsize = (12, 6) bin_width = 0.9 alpha = 0.5 transparent = False bbox_inches = &quot;tight&quot; facecolor = &quot;white&quot; # Load the `.env` file into the environment if it exists load_dotenv() api = kwh.KitchenerWilmotHydroAPI( user=os.getenv(&quot;KWHYDRO_USER&quot;), password=os.getenv(&quot;KWHYDRO_PASSWORD&quot;), data_path=os.getenv(&quot;DATA_PATH&quot;, os.path.join(&quot;..&quot;, &quot;..&quot;, &quot;..&quot;, &quot;data&quot;)), google_sa_credentials=os.getenv(&quot;GOOGLE_SA_CREDENTIALS&quot;), browser=os.getenv(&quot;BROWSER&quot;, &quot;Firefox&quot;), ) # # Get up to 24 statements (the most recent). # updates = api.update(24) # if updates is not None: # print(f&quot;{ len(updates) } statements_downloaded&quot;) # api.history(&quot;monthly&quot;).tail() . updates = api.update(24) api.history(&quot;monthly&quot;).tail() . Monthly electricity consumption history . electricity = api.history(&quot;monthly&quot;) plt.figure() electricity[[&quot;On Peak Consumption&quot;, &quot;Mid Peak Consumption&quot;, &quot;Off Peak Consumption&quot;]].plot.bar( stacked=True, width=bin_width, color=[&quot;#F07E6E&quot;, &quot;#EDDD46&quot;, &quot;#90CD97&quot;], figsize=figsize, ) plt.ylim((0, None)) locs, labels = plt.xticks() plt.xticks(locs, labels=[label.get_text().split(&quot; &quot;)[0] for label in labels]); plt.title(&quot;Monthly Electricity Consumption&quot;) plt.ylabel(&quot;kWh&quot;) plt.legend([&quot;Off Peak&quot;, &quot;Mid Peak&quot;, &quot;On Peak&quot;, &quot;Total&quot;]) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) os.makedirs(&quot;images&quot;, exist_ok=True) plt.savefig( os.path.join(&quot;images&quot;, &quot;monthly_electricity_consumption.png&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ); . Annual CO2 emissions . # * 40 g / kWh (https://www.neb-one.gc.ca/nrg/sttstc/lctrct/rprt/ # 2017cndrnwblpwr/ghgmssn-eng.html) # * 77 g / kWh (https://www.conferenceboard.ca/hcp/provincial/environment/ # low-emitting-electricity-production.aspx) # * This is likely to go up when Pickering is closed # https://www.opg.com/darlington-refurbishment/Documents/IntrinsikReport_GHG_OntarioPower.pdf carbon_intensity_kgCO2_per_kwh = 0.077 plt.figure(figsize=figsize) electricity[&quot;kgCO2&quot;] = electricity[&quot;Total Consumption&quot;] * carbon_intensity_kgCO2_per_kwh electricity[&quot;year&quot;] = [x.year for x in electricity.index] electricity[&quot;month&quot;] = [x.month for x in electricity.index] (electricity.groupby(&quot;year&quot;).sum()[&quot;kgCO2&quot;] / 1e3).plot.bar(width=bin_width) plt.title(&quot;Annual CO$_2$e emissions from electricity&quot;) plt.ylabel(&quot;tCO$_2$e&quot;) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) os.makedirs(&quot;images&quot;, exist_ok=True) plt.savefig( os.path.join(&quot;images&quot;, &quot;annual_co2_emissions_electricity.png&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) print(&quot;annual electricity usage: %.1f kWh&quot; % (electricity[&quot;Total Consumption&quot;].iloc[-12:].sum())) print(&quot;annual electricity cost: $%.2f&quot; % (electricity[&quot;Total&quot;].iloc[-12:].sum())) print( &quot;annual CO2 emissions from electricity: %.2f kg&quot; % (electricity[&quot;Total Consumption&quot;].iloc[-12:].sum() * carbon_intensity_kgCO2_per_kwh) ) . CO2 emissions vs previous year . n_years_history = 1 plt.figure(figsize=figsize) for year, df_year in electricity.groupby(&quot;year&quot;): if year &gt;= dt.datetime.utcnow().year - n_years_history: df_year.sort_values(&quot;month&quot;, inplace=True) plt.bar( df_year[&quot;month&quot;], df_year[&quot;Total Consumption&quot;], label=year, width=bin_width, alpha=alpha, ) plt.legend() plt.ylabel(&quot;m$^3$&quot;) plt.xlabel(&quot;Month&quot;) ylim = plt.ylim() ax = plt.gca() ax2 = ax.twinx() plt.ylabel(&quot;tCO$_2$e&quot;) plt.title(&quot;Monthly CO$_2$e emissions from electricity&quot;) ax.spines[&quot;top&quot;].set_visible(False) ax2.spines[&quot;top&quot;].set_visible(False) os.makedirs(&quot;images&quot;, exist_ok=True) plt.savefig( os.path.join(&quot;images&quot;, &quot;monthly_co2_emissions_electricity.png&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) plt.figure(figsize=figsize) for year, df_year in electricity.groupby(&quot;year&quot;): if year &gt;= dt.datetime.utcnow().year - n_years_history: df_year.sort_values(&quot;month&quot;, inplace=True) plt.bar( df_year[&quot;month&quot;], np.cumsum(df_year[&quot;Total Consumption&quot;]), label=year, width=bin_width, alpha=alpha, ) plt.legend() plt.ylabel(&quot;m$^3$&quot;) plt.xlabel(&quot;Month&quot;) ylim = plt.ylim() ax = plt.gca() ax2 = ax.twinx() plt.ylabel(&quot;tCO$_2$e&quot;) plt.title(&quot;Cumulative CO$_2$e emissions from electricity per year&quot;) ax.spines[&quot;top&quot;].set_visible(False) ax2.spines[&quot;top&quot;].set_visible(False) os.makedirs(&quot;images&quot;, exist_ok=True) plt.savefig( os.path.join(&quot;images&quot;, &quot;cumulative_co2_emissions_electricity.png&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . api.download_hourly_data() hourly_usage = api.history(&quot;hourly&quot;) plt.figure() hourly_usage[-24:].plot.bar( width=bin_width, figsize=figsize, ) plt.ylim((0, None)) locs, labels = plt.xticks() plt.xticks(locs, labels=[label.get_text().split(&quot; &quot;)[1][:2] for label in labels]) plt.xticks(rotation=0) plt.title(&quot;Hourly Electricity Consumption for %s&quot; % hourly_usage.index[-1].date()) plt.ylabel(&quot;kWh&quot;) plt.xlabel(&quot;Time&quot;) ax = plt.gca() ax.get_legend().remove() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) os.makedirs(&quot;images&quot;, exist_ok=True) plt.savefig( os.path.join(&quot;images&quot;, &quot;hourly_electricity_consumption.png&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ); .",
            "url": "https://ryanfobel.github.io/test-blog/2022/01/26/kitchener_wilmot_hydro_hourly.html",
            "relUrl": "/2022/01/26/kitchener_wilmot_hydro_hourly.html",
            "date": " • Jan 26, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Download data",
            "content": ". Introduction . This notebook will help you to download pdf statements and data from a Kitchener-Wilmot Hydro account. Launch an interactive version by clicking on the Open in Colab badge at the top of this page. . try: import utility_bill_scraper except ModuleNotFoundError: import subprocess import sys cmd = ( f&quot;{sys.executable} -m pip install --upgrade --upgrade-strategy &quot; &quot;only-if-needed &quot; &quot;git+https://github.com/ryanfobel/utility-bill-scraper.git&quot; ) subprocess.check_output(cmd, stderr=subprocess.STDOUT, shell=True).decode(&quot;utf-8&quot;) from utility_bill_scraper import install_colab_dependencies install_colab_dependencies(required_envs=[&quot;KWHYDRO_USER&quot;, &quot;KWHYDRO_PASSWORD&quot;]) %matplotlib inline import datetime as dt import os import sys from cycler import cycler from dotenv import load_dotenv import matplotlib.pyplot as plt import numpy as np from utility_bill_scraper import LIGHT_COLORMAP import utility_bill_scraper.canada.on.kitchener_wilmot_hydro as kwh # Plotting preferences plt.rc(&quot;axes&quot;, prop_cycle=cycler(&quot;color&quot;, LIGHT_COLORMAP)) figsize = (12, 6) bin_width = 0.9 alpha = 0.5 transparent = False bbox_inches = &quot;tight&quot; facecolor = &quot;white&quot; # Load the `.env` file into the environment if it exists load_dotenv() api = kwh.KitchenerWilmotHydroAPI( user=os.getenv(&quot;KWHYDRO_USER&quot;), password=os.getenv(&quot;KWHYDRO_PASSWORD&quot;), data_path=os.getenv(&quot;DATA_PATH&quot;, os.path.join(&quot;..&quot;, &quot;..&quot;, &quot;..&quot;, &quot;data&quot;)), google_sa_credentials=os.getenv(&quot;GOOGLE_SA_CREDENTIALS&quot;), browser=os.getenv(&quot;BROWSER&quot;, &quot;Firefox&quot;), ) # Get up to 24 statements (the most recent). updates = api.update(24) if updates is not None: print(f&quot;{ len(updates) } statements_downloaded&quot;) api.history(&quot;monthly&quot;).tail() . Mounted at /content/drive Scrape data from /content/drive/MyDrive/Colab Notebooks/data/Kitchener-Wilmot Hydro/statements/2022-01-06 - Kitchener-Wilmot Hydro - $117.69.pdf Scrape data from /content/drive/MyDrive/Colab Notebooks/data/Kitchener-Wilmot Hydro/statements/2021-12-09 - Kitchener-Wilmot Hydro - $95.95.pdf 2 statements_downloaded . Total Off Peak Consumption Mid Peak Consumption On Peak Consumption Off Peak Rate Mid Peak Rate On Peak Rate Total Consumption . Date . 2021-09-23 99.80 | 438.80 | 128.16 | 116.26 | 0.082 | 0.170 | 0.113 | 683.22 | . 2021-10-20 92.14 | 387.96 | 133.76 | 96.00 | 0.082 | 0.113 | 0.170 | 617.72 | . 2021-11-10 199.14 | 436.48 | 170.30 | 127.46 | 0.082 | 0.113 | 0.170 | 734.24 | . 2021-12-09 95.95 | 328.82 | 100.57 | 160.46 | 0.082 | 0.113 | 0.170 | 589.85 | . 2022-01-06 117.69 | 607.08 | 119.50 | 119.91 | 0.082 | 0.113 | 0.170 | 846.49 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Monthly electricity consumption history . df = api.history(&quot;monthly&quot;) plt.figure() df[[&quot;On Peak Consumption&quot;, &quot;Mid Peak Consumption&quot;, &quot;Off Peak Consumption&quot;]].plot.bar( stacked=True, width=bin_width, color=[&quot;#F07E6E&quot;, &quot;#EDDD46&quot;, &quot;#90CD97&quot;], figsize=figsize, ) plt.ylim((0, None)) plt.title(&quot;Monthly Electricity Consumption&quot;) plt.ylabel(&quot;kWh&quot;) plt.legend([&quot;Off Peak&quot;, &quot;Mid Peak&quot;, &quot;On Peak&quot;, &quot;Total&quot;]) os.makedirs(&quot;images&quot;, exist_ok=True) plt.savefig( os.path.join(&quot;images&quot;, &quot;monthly_electricity_consumption.png&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . &lt;Figure size 432x288 with 0 Axes&gt; . Annual CO2 emissions . # * 40 g / kWh (https://www.neb-one.gc.ca/nrg/sttstc/lctrct/rprt/ # 2017cndrnwblpwr/ghgmssn-eng.html) # * 77 g / kWh (https://www.conferenceboard.ca/hcp/provincial/environment/ # low-emitting-electricity-production.aspx) # * This is likely to go up when Pickering is closed # https://www.opg.com/darlington-refurbishment/Documents/IntrinsikReport_GHG_OntarioPower.pdf carbon_intensity_kgCO2_per_kwh = 0.077 plt.figure(figsize=figsize) df[&quot;kgCO2&quot;] = df[&quot;Total Consumption&quot;] * carbon_intensity_kgCO2_per_kwh df[&quot;year&quot;] = [int(x.year) for x in df.index] df[&quot;month&quot;] = [int(x.month) for x in df.index] (df.groupby(&quot;year&quot;).sum()[&quot;kgCO2&quot;] / 1e3).plot.bar(width=bin_width) plt.title(&quot;Annual CO$_2$e emissions from electricity&quot;) plt.ylabel(&quot;tCO$_2$e&quot;) os.makedirs(&quot;images&quot;, exist_ok=True) plt.savefig( os.path.join(&quot;images&quot;, &quot;annual_co2_emissions_electricity.png&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) print(&quot;annual electricity usage: %.1f kWh&quot; % (df[&quot;Total Consumption&quot;].iloc[-12:].sum())) print(&quot;annual electricity cost: $%.2f&quot; % (df[&quot;Total&quot;].iloc[-12:].sum())) print( &quot;annual CO2 emissions from electricity: %.2f kg&quot; % (df[&quot;Total Consumption&quot;].iloc[-12:].sum() * carbon_intensity_kgCO2_per_kwh) ) . annual electricity usage: 8053.8 kWh annual electricity cost: $1269.96 annual CO2 emissions from electricity: 620.14 kg . CO2 emissions vs previous year . n_years_history = 1 plt.figure(figsize=figsize) for year, df_year in df.groupby(&quot;year&quot;): if year &gt;= dt.datetime.utcnow().year - n_years_history: df_year.sort_values(&quot;month&quot;, inplace=True) plt.bar( df_year[&quot;month&quot;], df_year[&quot;Total Consumption&quot;], label=year, width=bin_width, alpha=alpha, ) plt.legend() plt.ylabel(&quot;m$^3$&quot;) plt.xlabel(&quot;Month&quot;) ylim = plt.ylim() ax = plt.gca() ax2 = ax.twinx() plt.ylabel(&quot;tCO$_2$e&quot;) plt.title(&quot;Monthly CO$_2$e emissions from electricity&quot;) os.makedirs(&quot;images&quot;, exist_ok=True) plt.savefig( os.path.join(&quot;images&quot;, &quot;monthly_co2_emissions_electricity.png&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) plt.figure(figsize=figsize) for year, df_year in df.groupby(&quot;year&quot;): if year &gt;= dt.datetime.utcnow().year - n_years_history: df_year.sort_values(&quot;month&quot;, inplace=True) plt.bar( df_year[&quot;month&quot;], np.cumsum(df_year[&quot;Total Consumption&quot;]), label=year, width=bin_width, alpha=alpha, ) plt.legend() plt.ylabel(&quot;m$^3$&quot;) plt.xlabel(&quot;Month&quot;) ylim = plt.ylim() ax = plt.gca() ax2 = ax.twinx() plt.ylabel(&quot;tCO$_2$e&quot;) plt.title(&quot;Cumulative CO$_2$e emissions from electricity per year&quot;) os.makedirs(&quot;images&quot;, exist_ok=True) plt.savefig( os.path.join(&quot;images&quot;, &quot;cumulative_co2_emissions_electricity.png&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) .",
            "url": "https://ryanfobel.github.io/test-blog/2022/01/26/kitchener_wilmot_hydro.html",
            "relUrl": "/2022/01/26/kitchener_wilmot_hydro.html",
            "date": " • Jan 26, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Download data",
            "content": ". Introduction . This notebook will help you to download pdf statements and data from a Kitchener Utilities account. Launch an interactive version by clicking on the Open in Colab badge at the top of this page. . try: import utility_bill_scraper except ModuleNotFoundError: import subprocess import sys cmd = ( f&quot;{sys.executable} -m pip install --upgrade --upgrade-strategy &quot; &quot;only-if-needed &quot; &quot;git+https://github.com/ryanfobel/utility-bill-scraper.git&quot; ) subprocess.check_output(cmd, stderr=subprocess.STDOUT, shell=True).decode(&quot;utf-8&quot;) from utility_bill_scraper import install_colab_dependencies install_colab_dependencies( required_envs=[&quot;KITCHENER_UTILITIES_USER&quot;, &quot;KITCHENER_UTILITIES_PASSWORD&quot;] ) %matplotlib inline import datetime as dt import os import sys from cycler import cycler from dotenv import load_dotenv import matplotlib.pyplot as plt import numpy as np from utility_bill_scraper import LIGHT_COLORMAP import utility_bill_scraper.canada.on.kitchener_utilities as ku # Plotting preferences plt.rc(&quot;axes&quot;, prop_cycle=cycler(&quot;color&quot;, LIGHT_COLORMAP)) figsize = (12, 6) bin_width = 0.9 alpha = 0.5 transparent = False bbox_inches = &quot;tight&quot; facecolor = &quot;white&quot; # Load the `.env` file into the environment if it exists load_dotenv() api = ku.KitchenerUtilitiesAPI( user=os.getenv(&quot;KITCHENER_UTILITIES_USER&quot;), password=os.getenv(&quot;KITCHENER_UTILITIES_PASSWORD&quot;), data_path=os.getenv(&quot;DATA_PATH&quot;, os.path.join(&quot;..&quot;, &quot;..&quot;, &quot;..&quot;, &quot;data&quot;)), google_sa_credentials=os.getenv(&quot;GOOGLE_SA_CREDENTIALS&quot;), browser=os.getenv(&quot;BROWSER&quot;, &quot;Firefox&quot;), ) # Get up to 24 statements (the most recent). updates = api.update(24) if updates is not None: print(f&quot;{ len(updates) } statements_downloaded&quot;) api.history(&quot;monthly&quot;).tail() . Mounted at /content/drive Scrape data from /content/drive/MyDrive/Colab Notebooks/data/Kitchener Utilities/statements/2021-12-14 - Kitchener Utilities - $148.23.pdf 1 statements_downloaded . Account Number Balance Forward Gas &amp; Water Charges Gas Charges Gas Consumption Stormwater Rate Charges Total Water Charges Water Consumption . Date . 2021-08-17 110159085.0 | 0.0 | 56.16 | 27.87 | 2.0 | 16.39 | 72.55 | 28.29 | 5.0 | . 2021-09-16 110159085.0 | 0.0 | 53.51 | 25.22 | 4.0 | 16.39 | 69.90 | 28.29 | 5.0 | . 2021-10-18 110159085.0 | 0.0 | 85.91 | 40.63 | 42.0 | 16.39 | 102.30 | 45.28 | 8.0 | . 2021-11-16 110159085.0 | 0.0 | 65.57 | 37.28 | 52.0 | 16.39 | 81.96 | 28.29 | 5.0 | . 2021-12-14 110159085.0 | 0.0 | 131.84 | 92.23 | 208.0 | 16.39 | 148.23 | 39.61 | 7.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Plotting . Monthly consumption history . df = api.history(&quot;monthly&quot;)[-24:] figsize=(20,6) bin_width = 30 plt.figure(figsize=figsize) plt.bar(df.index, df[&quot;Gas Consumption&quot;], width=bin_width, alpha=alpha) plt.xticks(rotation=90) plt.title(&quot;Monthly Gas Consumption&quot;) plt.ylabel(&quot;m$^3$&quot;) os.makedirs(&quot;images&quot;, exist_ok=True) plt.savefig( os.path.join(&quot;images&quot;, &quot;monthly_gas_consumption.png&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) plt.figure(figsize=figsize) plt.bar(df.index, df[&quot;Water Consumption&quot;], width=bin_width, alpha=alpha) plt.xticks(rotation=90) plt.title(&quot;Monthly Water Consumption&quot;) plt.ylabel(&quot;m$^3$&quot;) os.makedirs(&quot;images&quot;, exist_ok=True) plt.savefig( os.path.join(&quot;images&quot;, &quot;monthly_water_consumption.png&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Annual CO2 emissions . from utility_bill_scraper import GAS_KGCO2_PER_CUBIC_METER bin_width = 0.9 df[&quot;kgCO2&quot;] = df[&quot;Gas Consumption&quot;] * GAS_KGCO2_PER_CUBIC_METER df[&quot;year&quot;] = [int(x.year) for x in df.index] df[&quot;month&quot;] = [int(x.month) for x in df.index] plt.figure(figsize=figsize) df.groupby(&quot;year&quot;).sum()[&quot;Gas Consumption&quot;].plot.bar(width=bin_width, alpha=alpha) plt.ylabel(&quot;m$^3$&quot;) ylim = plt.ylim() ax = plt.gca() ax2 = ax.twinx() plt.ylabel(&quot;tCO$_2$e&quot;) plt.ylim([GAS_KGCO2_PER_CUBIC_METER * y / 1e3 for y in ylim]) plt.title(&quot;Annual CO$_2$e emissions from natural gas&quot;) os.makedirs(&quot;images&quot;, exist_ok=True) plt.savefig( os.path.join(&quot;images&quot;, &quot;annual_co2_emissions_natural_gas.png&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . /usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy &#34;&#34;&#34; /usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy /usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy import sys . CO2 emissions vs previous year . n_years_history = 2 plt.figure(figsize=figsize) for year, df_year in df.groupby(&quot;year&quot;): if year &gt;= dt.datetime.utcnow().year - n_years_history: df_year.sort_values(&quot;month&quot;, inplace=True) plt.bar( df_year[&quot;month&quot;], df_year[&quot;Gas Consumption&quot;], label=year, width=bin_width, alpha=alpha, ) plt.legend() plt.ylabel(&quot;m$^3$&quot;) plt.xlabel(&quot;Month&quot;) ylim = plt.ylim() ax = plt.gca() ax2 = ax.twinx() plt.ylabel(&quot;tCO$_2$e&quot;) plt.ylim([GAS_KGCO2_PER_CUBIC_METER * y / 1e3 for y in ylim]) plt.title(&quot;Monthly CO$_2$e emissions from natural gas&quot;) os.makedirs(&quot;images&quot;, exist_ok=True) plt.savefig( os.path.join(&quot;images&quot;, &quot;monthly_co2_emissions_natural_gas.png&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) plt.figure(figsize=figsize) for year, df_year in df.groupby(&quot;year&quot;): if year &gt;= dt.datetime.utcnow().year - n_years_history: df_year.sort_values(&quot;month&quot;, inplace=True) plt.bar( df_year[&quot;month&quot;], np.cumsum(df_year[&quot;Gas Consumption&quot;]), label=year, width=bin_width, alpha=alpha, ) plt.legend() plt.ylabel(&quot;m$^3$&quot;) plt.xlabel(&quot;Month&quot;) ylim = plt.ylim() ax = plt.gca() ax2 = ax.twinx() plt.ylabel(&quot;tCO$_2$e&quot;) plt.ylim([GAS_KGCO2_PER_CUBIC_METER * y / 1e3 for y in ylim]) plt.title(&quot;Cumulative CO$_2$e emissions from natural gas per year&quot;) os.makedirs(&quot;images&quot;, exist_ok=True) plt.savefig( os.path.join(&quot;images&quot;, &quot;cumulative_co2_emissions_natural_gas.png&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) .",
            "url": "https://ryanfobel.github.io/test-blog/2022/01/26/kitchener_utilities.html",
            "relUrl": "/2022/01/26/kitchener_utilities.html",
            "date": " • Jan 26, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Title",
            "content": "%pip install kicad-helpers . Collecting kicad-helpers Downloading kicad_helpers-0.14-py3-none-any.whl (27 kB) Collecting fastrelease Downloading fastrelease-0.1.12-py3-none-any.whl (14 kB) Collecting python-dotenv Downloading python_dotenv-0.19.2-py2.py3-none-any.whl (17 kB) Requirement already satisfied: nbformat&gt;=4.4.0 in /usr/local/lib/python3.7/dist-packages (from kicad-helpers) (5.1.3) Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from kicad-helpers) (1.1.5) Requirement already satisfied: nbconvert&lt;6 in /usr/local/lib/python3.7/dist-packages (from kicad-helpers) (5.6.1) Collecting gitpython Downloading GitPython-3.1.24-py3-none-any.whl (180 kB) |████████████████████████████████| 180 kB 9.8 MB/s Collecting ghapi Downloading ghapi-0.1.19-py3-none-any.whl (51 kB) |████████████████████████████████| 51 kB 254 kB/s Requirement already satisfied: ipykernel in /usr/local/lib/python3.7/dist-packages (from kicad-helpers) (4.10.1) Collecting kifield Downloading kifield-0.2.0.tar.gz (1.7 MB) |████████████████████████████████| 1.7 MB 45.7 MB/s Requirement already satisfied: jupyter in /usr/local/lib/python3.7/dist-packages (from kicad-helpers) (1.0.0) Collecting pandera Downloading pandera-0.8.0-py3-none-any.whl (186 kB) |████████████████████████████████| 186 kB 42.5 MB/s Requirement already satisfied: jupyter-client in /usr/local/lib/python3.7/dist-packages (from kicad-helpers) (5.3.5) Collecting nbdev Downloading nbdev-1.1.23-py3-none-any.whl (46 kB) |████████████████████████████████| 46 kB 4.3 MB/s Collecting fastcore&gt;=1.3.19 Downloading fastcore-1.3.27-py3-none-any.whl (56 kB) |████████████████████████████████| 56 kB 4.5 MB/s Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (from kicad-helpers) (3.13) Requirement already satisfied: pip in /usr/local/lib/python3.7/dist-packages (from fastcore&gt;=1.3.19-&gt;kicad-helpers) (21.1.3) Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from fastcore&gt;=1.3.19-&gt;kicad-helpers) (21.3) Requirement already satisfied: mistune&lt;2,&gt;=0.8.1 in /usr/local/lib/python3.7/dist-packages (from nbconvert&lt;6-&gt;kicad-helpers) (0.8.4) Requirement already satisfied: jinja2&gt;=2.4 in /usr/local/lib/python3.7/dist-packages (from nbconvert&lt;6-&gt;kicad-helpers) (2.11.3) Requirement already satisfied: testpath in /usr/local/lib/python3.7/dist-packages (from nbconvert&lt;6-&gt;kicad-helpers) (0.5.0) Requirement already satisfied: defusedxml in /usr/local/lib/python3.7/dist-packages (from nbconvert&lt;6-&gt;kicad-helpers) (0.7.1) Requirement already satisfied: bleach in /usr/local/lib/python3.7/dist-packages (from nbconvert&lt;6-&gt;kicad-helpers) (4.1.0) Requirement already satisfied: jupyter-core in /usr/local/lib/python3.7/dist-packages (from nbconvert&lt;6-&gt;kicad-helpers) (4.9.1) Requirement already satisfied: entrypoints&gt;=0.2.2 in /usr/local/lib/python3.7/dist-packages (from nbconvert&lt;6-&gt;kicad-helpers) (0.3) Requirement already satisfied: pandocfilters&gt;=1.4.1 in /usr/local/lib/python3.7/dist-packages (from nbconvert&lt;6-&gt;kicad-helpers) (1.5.0) Requirement already satisfied: pygments in /usr/local/lib/python3.7/dist-packages (from nbconvert&lt;6-&gt;kicad-helpers) (2.6.1) Requirement already satisfied: traitlets&gt;=4.2 in /usr/local/lib/python3.7/dist-packages (from nbconvert&lt;6-&gt;kicad-helpers) (5.1.1) Requirement already satisfied: MarkupSafe&gt;=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2&gt;=2.4-&gt;nbconvert&lt;6-&gt;kicad-helpers) (2.0.1) Requirement already satisfied: jsonschema!=2.5.0,&gt;=2.4 in /usr/local/lib/python3.7/dist-packages (from nbformat&gt;=4.4.0-&gt;kicad-helpers) (2.6.0) Requirement already satisfied: ipython-genutils in /usr/local/lib/python3.7/dist-packages (from nbformat&gt;=4.4.0-&gt;kicad-helpers) (0.2.0) Requirement already satisfied: six&gt;=1.9.0 in /usr/local/lib/python3.7/dist-packages (from bleach-&gt;nbconvert&lt;6-&gt;kicad-helpers) (1.15.0) Requirement already satisfied: webencodings in /usr/local/lib/python3.7/dist-packages (from bleach-&gt;nbconvert&lt;6-&gt;kicad-helpers) (0.5.1) Collecting gitdb&lt;5,&gt;=4.0.1 Downloading gitdb-4.0.9-py3-none-any.whl (63 kB) |████████████████████████████████| 63 kB 1.6 MB/s Requirement already satisfied: typing-extensions&gt;=3.7.4.3 in /usr/local/lib/python3.7/dist-packages (from gitpython-&gt;kicad-helpers) (3.10.0.2) Collecting smmap&lt;6,&gt;=3.0.1 Downloading smmap-5.0.0-py3-none-any.whl (24 kB) Requirement already satisfied: ipython&gt;=4.0.0 in /usr/local/lib/python3.7/dist-packages (from ipykernel-&gt;kicad-helpers) (5.5.0) Requirement already satisfied: tornado&gt;=4.0 in /usr/local/lib/python3.7/dist-packages (from ipykernel-&gt;kicad-helpers) (5.1.1) Requirement already satisfied: pickleshare in /usr/local/lib/python3.7/dist-packages (from ipython&gt;=4.0.0-&gt;ipykernel-&gt;kicad-helpers) (0.7.5) Requirement already satisfied: simplegeneric&gt;0.8 in /usr/local/lib/python3.7/dist-packages (from ipython&gt;=4.0.0-&gt;ipykernel-&gt;kicad-helpers) (0.8.1) Requirement already satisfied: prompt-toolkit&lt;2.0.0,&gt;=1.0.4 in /usr/local/lib/python3.7/dist-packages (from ipython&gt;=4.0.0-&gt;ipykernel-&gt;kicad-helpers) (1.0.18) Requirement already satisfied: setuptools&gt;=18.5 in /usr/local/lib/python3.7/dist-packages (from ipython&gt;=4.0.0-&gt;ipykernel-&gt;kicad-helpers) (57.4.0) Requirement already satisfied: decorator in /usr/local/lib/python3.7/dist-packages (from ipython&gt;=4.0.0-&gt;ipykernel-&gt;kicad-helpers) (4.4.2) Requirement already satisfied: pexpect in /usr/local/lib/python3.7/dist-packages (from ipython&gt;=4.0.0-&gt;ipykernel-&gt;kicad-helpers) (4.8.0) Requirement already satisfied: wcwidth in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit&lt;2.0.0,&gt;=1.0.4-&gt;ipython&gt;=4.0.0-&gt;ipykernel-&gt;kicad-helpers) (0.2.5) Requirement already satisfied: qtconsole in /usr/local/lib/python3.7/dist-packages (from jupyter-&gt;kicad-helpers) (5.2.1) Requirement already satisfied: jupyter-console in /usr/local/lib/python3.7/dist-packages (from jupyter-&gt;kicad-helpers) (5.2.0) Requirement already satisfied: ipywidgets in /usr/local/lib/python3.7/dist-packages (from jupyter-&gt;kicad-helpers) (7.6.5) Requirement already satisfied: notebook in /usr/local/lib/python3.7/dist-packages (from jupyter-&gt;kicad-helpers) (5.3.1) Requirement already satisfied: widgetsnbextension~=3.5.0 in /usr/local/lib/python3.7/dist-packages (from ipywidgets-&gt;jupyter-&gt;kicad-helpers) (3.5.2) Requirement already satisfied: jupyterlab-widgets&gt;=1.0.0 in /usr/local/lib/python3.7/dist-packages (from ipywidgets-&gt;jupyter-&gt;kicad-helpers) (1.0.2) Requirement already satisfied: terminado&gt;=0.8.1 in /usr/local/lib/python3.7/dist-packages (from notebook-&gt;jupyter-&gt;kicad-helpers) (0.12.1) Requirement already satisfied: Send2Trash in /usr/local/lib/python3.7/dist-packages (from notebook-&gt;jupyter-&gt;kicad-helpers) (1.8.0) Requirement already satisfied: python-dateutil&gt;=2.1 in /usr/local/lib/python3.7/dist-packages (from jupyter-client-&gt;kicad-helpers) (2.8.2) Requirement already satisfied: pyzmq&gt;=13 in /usr/local/lib/python3.7/dist-packages (from jupyter-client-&gt;kicad-helpers) (22.3.0) Requirement already satisfied: ptyprocess in /usr/local/lib/python3.7/dist-packages (from terminado&gt;=0.8.1-&gt;notebook-&gt;jupyter-&gt;kicad-helpers) (0.7.0) Requirement already satisfied: future&gt;=0.15.0 in /usr/local/lib/python3.7/dist-packages (from kifield-&gt;kicad-helpers) (0.16.0) Collecting openpyxl&gt;=2.6.0 Downloading openpyxl-3.0.9-py2.py3-none-any.whl (242 kB) |████████████████████████████████| 242 kB 46.7 MB/s Collecting sexpdata Downloading sexpdata-0.0.3.tar.gz (6.3 kB) Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.7/dist-packages (from openpyxl&gt;=2.6.0-&gt;kifield-&gt;kicad-helpers) (1.1.0) Requirement already satisfied: pyparsing!=3.0.5,&gt;=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging-&gt;fastcore&gt;=1.3.19-&gt;kicad-helpers) (3.0.6) Requirement already satisfied: numpy&gt;=1.15.4 in /usr/local/lib/python3.7/dist-packages (from pandas-&gt;kicad-helpers) (1.19.5) Requirement already satisfied: pytz&gt;=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas-&gt;kicad-helpers) (2018.9) Requirement already satisfied: wrapt in /usr/local/lib/python3.7/dist-packages (from pandera-&gt;kicad-helpers) (1.13.3) Requirement already satisfied: pyarrow in /usr/local/lib/python3.7/dist-packages (from pandera-&gt;kicad-helpers) (3.0.0) Collecting typing-inspect&gt;=0.6.0 Downloading typing_inspect-0.7.1-py3-none-any.whl (8.4 kB) Collecting pandas-stubs Downloading pandas_stubs-1.2.0.39-py3-none-any.whl (161 kB) |████████████████████████████████| 161 kB 65.1 MB/s Collecting mypy-extensions&gt;=0.3.0 Downloading mypy_extensions-0.4.3-py2.py3-none-any.whl (4.5 kB) Requirement already satisfied: qtpy in /usr/local/lib/python3.7/dist-packages (from qtconsole-&gt;jupyter-&gt;kicad-helpers) (1.11.2) Building wheels for collected packages: kifield, sexpdata Building wheel for kifield (setup.py) ... done Created wheel for kifield: filename=kifield-0.2.0-py2.py3-none-any.whl size=29694 sha256=4b2fd7bb438eaf397c6a92fe51e06adf026d97562de450cdd7e4ed414356d556 Stored in directory: /root/.cache/pip/wheels/a7/07/3b/977a7840a5fbe464bb50f079e84bef73dabb6fe025338da993 Building wheel for sexpdata (setup.py) ... done Created wheel for sexpdata: filename=sexpdata-0.0.3-py3-none-any.whl size=7206 sha256=6c44dc698b1b7c7c5a573cf892cf00381b16afd3a7279a1430d331cebc807d3e Stored in directory: /root/.cache/pip/wheels/56/e1/83/f748d65656a82892415c360a9edcb5ef64f4c64750240174f6 Successfully built kifield sexpdata Installing collected packages: fastcore, smmap, mypy-extensions, ghapi, typing-inspect, sexpdata, pandas-stubs, openpyxl, gitdb, fastrelease, python-dotenv, pandera, nbdev, kifield, gitpython, kicad-helpers Attempting uninstall: openpyxl Found existing installation: openpyxl 2.5.9 Uninstalling openpyxl-2.5.9: Successfully uninstalled openpyxl-2.5.9 Successfully installed fastcore-1.3.27 fastrelease-0.1.12 ghapi-0.1.19 gitdb-4.0.9 gitpython-3.1.24 kicad-helpers-0.14 kifield-0.2.0 mypy-extensions-0.4.3 nbdev-1.1.23 openpyxl-3.0.9 pandas-stubs-1.2.0.39 pandera-0.8.0 python-dotenv-0.19.2 sexpdata-0.0.3 smmap-5.0.0 typing-inspect-0.7.1 . https://github.com/ryanfobel/kicad-helpers . ! git clone https://github.com/sci-bots/dropbot-v3-connection-adapter.kicad.git . Cloning into &#39;dropbot-v3-connection-adapter.kicad&#39;... remote: Enumerating objects: 198, done. remote: Counting objects: 100% (198/198), done. remote: Compressing objects: 100% (129/129), done. remote: Total 198 (delta 66), reused 198 (delta 66), pack-reused 0 Receiving objects: 100% (198/198), 3.39 MiB | 11.44 MiB/s, done. Resolving deltas: 100% (66/66), done. . !cd dropbot-v3-connection-adapter.kicad &amp;&amp; kh_update --v . settings.ini already exists kitspace.yaml already exists .kicad_helpers_config/pcb_svg.yaml already exists .kicad_helpers_config/drc.yaml already exists .kicad_helpers_config/erc.yaml already exists .kicad_helpers_config/pcb_pdf.yaml already exists .kicad_helpers_config/sch_pdf.yaml already exists .kicad_helpers_config/sch_svg.yaml already exists .kicad_helpers_config/manufacturers/default.yaml already exists .kicad_helpers_config/manufacturers/PCBWay.yaml already exists tests/Tests.ipynb already exists .github/workflows/build.yml already exists To overwrite existing files, use the --overwrite flag. &#34;*.pro filter=kicad_project&#34; already exists in /content/dropbot-v3-connection-adapter.kicad/.gitattributes &#34;*.sch filter=kicad_sch&#34; already exists in /content/dropbot-v3-connection-adapter.kicad/.gitattributes Add filters to git config. &#34;_autosave*&#34; already exists in ./.gitignore &#34;*bak&#34; already exists in ./.gitignore &#34;*.xml&#34; already exists in ./.gitignore &#34;.ipynb_checkpoints&#34; already exists in ./.gitignore &#34;*-erc.txt&#34; already exists in ./.gitignore &#34;*-drc.txt&#34; already exists in ./.gitignore &#34;kibot_errors.filter&#34; already exists in ./.gitignore . !ls . dropbot-v3-connection-adapter.kicad sample_data .",
            "url": "https://ryanfobel.github.io/test-blog/2022/01/26/Test-kicad_helpers.html",
            "relUrl": "/2022/01/26/Test-kicad_helpers.html",
            "date": " • Jan 26, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ryanfobel.github.io/test-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ryanfobel.github.io/test-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}