{
  
    
        "post0": {
            "title": "Title",
            "content": "username = &quot;&quot; password = &quot;&quot; # Plotting preferences bin_width = 0.9 alpha = 0.5 transparent = False bbox_inches = &quot;tight&quot; facecolor = &quot;white&quot; %matplotlib inline import os import matplotlib.pyplot as plt from dotenv import load_dotenv from matplotlib import rcParams from cycler import cycler import utility_bill_scraper.canada.on.kitchener_wilmot_hydro as kwh # Scale the RGB values to the [0, 1] range, which is the format matplotlib accepts. def scale_rgb(colormap): return [(r / 255.0, g / 255.0, b / 255.0) for r, g, b in colormap] light = scale_rgb( [ (136, 189, 230), (251, 178, 88), (144, 205, 151), (246, 170, 201), (191, 165, 84), (188, 153, 199), (237, 221, 70), (240, 126, 110), (140, 140, 140), ] ) rcParams.update( { &quot;figure.figsize&quot;: (12, 6), &quot;font.size&quot;: 12, &quot;axes.prop_cycle&quot;: cycler(&quot;color&quot;, light), } ) # Load the `.env` file into the environment if it exists load_dotenv() # If we haven&#39;t set a username/password, try getting them from # environment variables. if not username: username = os.getenv(&quot;KWHYDRO_USER&quot;) if not password: password = os.getenv(&quot;KWHYDRO_PASSWORD&quot;) # Set the path where data is saved. data_path = os.getenv(&quot;DATA_PATH&quot;, os.path.join(&quot;..&quot;, &quot;..&quot;, &quot;..&quot;, &quot;data&quot;)) # Get google service account credentials (if the environment variable is set). google_sa_credentials = os.getenv(&quot;GOOGLE_SA_CREDENTIALS&quot;) # Uncomment the following 2 lines for development %load_ext autoreload %autoreload 2 api = kwh.KitchenerWilmotHydroAPI( username, password, data_path, google_sa_credentials=google_sa_credentials, ) api.history(&quot;monthly&quot;).tail() . Download file from google drive(file_id=16srVcNXMkblkPtm-j0nRk6D0iW5ieg48, local_path=/tmp/tmpakurz00m/monthly.csv Download file from google drive(file_id=1L5kUlljjgzJw3zRvKIcwM4Ovoo0c49Os, local_path=/tmp/tmpakurz00m/hourly.csv . Total Off Peak Consumption Mid Peak Consumption On Peak Consumption Off Peak Rate Mid Peak Rate On Peak Rate Total Consumption . Date . 2021-09-23 99.80 | 438.80 | 128.16 | 116.26 | 0.082 | 0.170 | 0.113 | 683.22 | . 2021-10-20 92.14 | 387.96 | 133.76 | 96.00 | 0.082 | 0.113 | 0.170 | 617.72 | . 2021-11-10 199.14 | 436.48 | 170.30 | 127.46 | 0.082 | 0.113 | 0.170 | 734.24 | . 2021-12-09 95.95 | 328.82 | 100.57 | 160.46 | 0.082 | 0.113 | 0.170 | 589.85 | . 2022-01-06 117.69 | 607.08 | 119.50 | 119.91 | 0.082 | 0.113 | 0.170 | 846.49 | . import glob import pandas as pd import arrow if api: api.download_hourly_data() df = api.history(&quot;hourly&quot;) # Plot hourly use over the past week plt.figure() days = 7 df.iloc[-24 * days :][&quot;kWh&quot;].plot.bar(width=1) plt.title(&quot;Hourly use over past week&quot;) plt.ylabel(&quot;kWh&quot;) plt.xticks(rotation=90) ticks, labels = plt.xticks() import math n = math.floor(len(ticks) / days) plt.xticks(ticks[1::n], [label.get_text().split(&quot; &quot;)[0] for label in labels[1::n]]) # Plot daily use plt.figure() df[&quot;Date&quot;] = [arrow.get(x).date().isoformat() for x in df.index] df_base = df.groupby(&quot;Date&quot;).sum() df_base[&quot;kWh&quot;].plot.area(alpha=0.3, figsize = (30, 6) ) plt.title(&quot;Daily use (all-time)&quot;) plt.ylabel(&quot;kWh&quot;) plt.xticks(rotation=90) . Downloading hourly data for 2022-01-01 to 2022-01-26... Upload file to google drive(file_id=16srVcNXMkblkPtm-j0nRk6D0iW5ieg48, local_path=/tmp/tmpakurz00m/monthly.csv Upload file to google drive(file_id=1L5kUlljjgzJw3zRvKIcwM4Ovoo0c49Os, local_path=/tmp/tmpakurz00m/hourly.csv .",
            "url": "https://ryanfobel.github.io/digital-notebook/2022/02/04/Getting-hourly-data-from-KWhydro.html",
            "relUrl": "/2022/02/04/Getting-hourly-data-from-KWhydro.html",
            "date": " • Feb 4, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Introduction to home CO₂ accounting",
            "content": "import matplotlib.pyplot as plt from util import get_gridwatch_data df_gridwatch = get_gridwatch_data() df_gridwatch[&quot;CO2e INTENSITY (g/kWh)&quot;].plot.area( figsize=(20,6), fontsize=20, alpha=0.2 ) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) . About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ryanfobel.github.io/digital-notebook/jupyter/climate/electrification/2022/01/28/Intro-to-home-co2-accounting.html",
            "relUrl": "/jupyter/climate/electrification/2022/01/28/Intro-to-home-co2-accounting.html",
            "date": " • Jan 28, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Hot water heater case study",
            "content": "Open an interactive version of this notebook by clicking on this button: . %load_ext autoreload %autoreload 2 try: import utility_bill_scraper except ModuleNotFoundError: import subprocess import sys cmd = ( f&quot;{sys.executable} -m pip install --upgrade --upgrade-strategy &quot; &quot;only-if-needed &quot; &quot;git+https://github.com/ryanfobel/utility-bill-scraper.git&quot; ) subprocess.check_output(cmd, stderr=subprocess.STDOUT, shell=True).decode(&quot;utf-8&quot;) %matplotlib inline import datetime as dt import os import sys import arrow from cycler import cycler from dotenv import load_dotenv import matplotlib.pyplot as plt import numpy as np import pandas as pd from utility_bill_scraper import LIGHT_COLORMAP import utility_bill_scraper.canada.on.kitchener_wilmot_hydro as kwh import utility_bill_scraper.canada.on.kitchener_utilities as ku from utility_bill_scraper import GAS_KGCO2_PER_CUBIC_METER, GAS_KWH_PER_CUBIC_METER # Plotting preferences plt.rc(&quot;axes&quot;, prop_cycle=cycler(&quot;color&quot;, LIGHT_COLORMAP)) figsize = (12, 6) bin_width = 0.9 alpha = 0.5 transparent = False bbox_inches = &quot;tight&quot; facecolor = &quot;white&quot; title_size=30 ylabel_size=30 legend_size=25 font_size=25 # Load the `.env` file into the environment if it exists load_dotenv() MAP = { ku.NAME: ku.KitchenerUtilitiesAPI, kwh.NAME: kwh.KitchenerWilmotHydroAPI, } . try: api = {} updates = {} for utility_name in MAP.keys(): kwargs = { &quot;data_path&quot;: os.getenv(&quot;DATA_PATH&quot;, os.path.join(&quot;..&quot;, &quot;..&quot;, &quot;..&quot;, &quot;data&quot;)), &quot;google_sa_credentials&quot;: os.getenv(&quot;GOOGLE_SA_CREDENTIALS&quot;), &quot;browser&quot;: os.getenv(&quot;BROWSER&quot;, &quot;Firefox&quot;), &quot;headless&quot;: True, } if utility_name == &quot;Kitchener-Wilmot Hydro&quot;: kwargs[&quot;user&quot;] = os.getenv(&quot;KWHYDRO_USER&quot;) kwargs[&quot;password&quot;] = os.getenv(&quot;KWHYDRO_PASSWORD&quot;) elif utility_name == &quot;Kitchener Utilities&quot;: kwargs[&quot;user&quot;] = os.getenv(&quot;KITCHENER_UTILITIES_USER&quot;) kwargs[&quot;password&quot;] = os.getenv(&quot;KITCHENER_UTILITIES_PASSWORD&quot;) api[utility_name] = MAP[utility_name](**kwargs) #updates[utility_name] = api[utility_name].update(24) #if updates[utility_name] is not None: # print(f&quot;{ utility_name }: { len(updates[utility_name]) } statements_downloaded&quot;) # Resample monthly data to end of month (ignore last sample because it is a duplicate due to interpolation) electricity = api[kwh.NAME].history(&quot;monthly&quot;).resample(&#39;D&#39;).interpolate().resample(&#39;M&#39;).interpolate()[:-1] electricity.to_csv(&quot;case_study_data/electricity.csv&quot;) gas = api[ku.NAME].history(&quot;monthly&quot;).resample(&#39;D&#39;).interpolate().resample(&#39;M&#39;).interpolate()[:-1] gas.to_csv(&quot;case_study_data/gas.csv&quot;) except: # Load data from github electricity = pd.read_csv(&quot;https://raw.githubusercontent.com/ryanfobel/utility-bill-scraper/main/notebooks/features/case_study_data/electricity.csv&quot;, index_col=&quot;Date&quot;) gas = pd.read_csv(&quot;https://raw.githubusercontent.com/ryanfobel/utility-bill-scraper/main/notebooks/features/case_study_data/gas.csv&quot;, index_col=&quot;Date&quot;) . Download file from google drive(file_id=1-IYaB4IdO6rQnNmh-Fo8DyEm5OLQCruo, local_path=/tmp/tmpcvjrp28b/monthly.csv Download file from google drive(file_id=16srVcNXMkblkPtm-j0nRk6D0iW5ieg48, local_path=/tmp/tmpasap3bp_/monthly.csv Download file from google drive(file_id=1L5kUlljjgzJw3zRvKIcwM4Ovoo0c49Os, local_path=/tmp/tmpasap3bp_/hourly.csv . Calculate CO$_2$ emissions . gas[&quot;kgCO2&quot;] = gas[&quot;Gas Consumption&quot;] * GAS_KGCO2_PER_CUBIC_METER # Carbon intensity of electricity generation in Ontario (40-77 g CO2 / kWh) # * 40 g / kWh (https://www.neb-one.gc.ca/nrg/sttstc/lctrct/rprt/ # 2017cndrnwblpwr/ghgmssn-eng.html) # * 77 g / kWh (https://www.conferenceboard.ca/hcp/provincial/environment/ # low-emitting-electricity-production.aspx) # * This is likely to go up when Pickering is closed # https://www.opg.com/darlington-refurbishment/Documents/IntrinsikReport_GHG_OntarioPower.pdf carbon_intensity_kgCO2_per_kwh = 0.077 electricity[&quot;kgCO2&quot;] = electricity[&quot;Total Consumption&quot;] * carbon_intensity_kgCO2_per_kwh . Electricity consumption . tco2 = pd.DataFrame() tco2[&quot;Gas&quot;] = gas[&quot;kgCO2&quot;] / 1e3 tco2[&quot;Electricity&quot;] = electricity[&quot;kgCO2&quot;] / 1e3 cost = pd.DataFrame() cost[&quot;Gas&quot;] = gas[&quot;Gas Charges&quot;] cost[&quot;Electricity&quot;] = electricity[&quot;Total&quot;] usage = pd.DataFrame() usage[&quot;Gas&quot;] = gas[&quot;Gas Consumption&quot;] * GAS_KWH_PER_CUBIC_METER usage[&quot;Electricity&quot;] = electricity[&quot;Total Consumption&quot;] try: water_heater_install = [i for i, date in enumerate(tco2.index) if date.isoformat()[:7] == &quot;2020-06&quot;][0] except AttributeError: water_heater_install = [i for i, date in enumerate(tco2.index) if date[:7] == &quot;2020-06&quot;][0] plt.figure() electricity[[&quot;On Peak Consumption&quot;, &quot;Mid Peak Consumption&quot;, &quot;Off Peak Consumption&quot;]].plot.bar( stacked=True, width=bin_width, color=[&quot;#F07E6E&quot;, &quot;#EDDD46&quot;, &quot;#90CD97&quot;], figsize=figsize, ) plt.ylim((0, None)) plt.yticks(np.arange(0, 2000, step=500), [&quot;{:,}&quot;.format(tic) for tic in np.arange(0, 2000, step=500)], fontsize=30, ); plt.title(&quot;Monthly Electricity Consumption&quot;, fontsize=title_size) plt.xlabel(&quot;&quot;) plt.ylabel(&quot;kWh&quot;, fontsize=ylabel_size) plt.legend([&quot;Off Peak&quot;, &quot;Mid Peak&quot;, &quot;On Peak&quot;, &quot;Total&quot;], fontsize=20, loc=&quot;upper left&quot;) os.makedirs(&quot;images&quot;, exist_ok=True) locs, labels = plt.xticks() plt.xticks(locs, labels=[label.get_text()[:7] for label in labels]); plt.plot([water_heater_install, water_heater_install], plt.ylim(), &#39;k--&#39;) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;monthly_electricity_consumption.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . &lt;Figure size 432x288 with 0 Axes&gt; . Gas consumption . plt.figure() gas[&quot;Gas Consumption&quot;].plot.bar( width=bin_width, figsize=figsize, ) plt.ylim((0, None)) plt.title(&quot;Monthly Gas Consumption&quot;, fontsize=title_size) plt.ylabel(&quot;m$^3$&quot;, fontsize=ylabel_size) os.makedirs(&quot;images&quot;, exist_ok=True) plt.yticks(np.arange(0, 500, step=100), [&quot;{:,}&quot;.format(tic) for tic in np.arange(0, 500, step=100)], fontsize=30, ); plt.xlabel(&quot;&quot;) locs, labels = plt.xticks() plt.xticks(locs, labels=[label.get_text()[:7] for label in labels]) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;monthly_gas_consumption.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Energy consumption . plt.figure() daily = usage.copy() try: days_in_month = daily.index.day except: days_in_month = np.array([int(date[-2:]) for date in daily.index]) daily[&quot;Gas&quot;] = daily[&quot;Gas&quot;] / days_in_month daily[&quot;Electricity&quot;] = daily[&quot;Electricity&quot;] / days_in_month daily.plot.bar( stacked=True, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], width=bin_width, figsize=figsize, legend=None, ); xlocs, xlabels = plt.xticks() plt.xticks(xlocs, labels=[label.get_text()[:7] for label in xlabels]); plt.title(&quot;Average Daily Energy Consumption&quot;, fontsize=title_size) plt.xlabel(&quot;&quot;) plt.legend(bbox_to_anchor=(1, 1.04), fontsize=25) plt.ylabel(&quot;kWh/day&quot;, fontsize=ylabel_size) plt.ylim((0, None)) ylocs, ylabels = plt.yticks() plt.yticks(ylocs, [int(tic) for tic in ylocs], fontsize=30, ) os.makedirs(&quot;images&quot;, exist_ok=True) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;daily_energy_consumption.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . &lt;Figure size 432x288 with 0 Axes&gt; . Monthly operating cost . tco2 = pd.DataFrame() tco2[&quot;Gas&quot;] = gas[&quot;kgCO2&quot;] / 1e3 tco2[&quot;Electricity&quot;] = electricity[&quot;kgCO2&quot;] / 1e3 cost = pd.DataFrame() cost[&quot;Gas&quot;] = gas[&quot;Gas Charges&quot;] cost[&quot;Electricity&quot;] = electricity[&quot;Total&quot;] cost.plot.bar( stacked=True, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], width=bin_width, fontsize=11, figsize=figsize, legend=None, ) xlocs, xlabels = plt.xticks() plt.xticks(xlocs, labels=[label.get_text()[:7] for label in xlabels]); plt.title(&quot;Monthly operating cost&quot;, fontsize=title_size) plt.xlabel(&quot;&quot;) plt.legend(bbox_to_anchor=(1, 1.04), fontsize=25) plt.yticks(np.arange(0, 300, step=100), [f&quot;${ tic }&quot; for tic in np.arange(0, 300, step=100)], fontsize=30, ); plt.ylim((0, 250)) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;monthly_operating_cost.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Monthly CO$_2$ emissions . tco2.plot.bar( stacked=True, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], width=bin_width, fontsize=30, ylabel=&quot;tCO$_2$e&quot;, figsize=figsize, ) plt.legend( #bbox_to_anchor=(1, 1.04), fontsize=25 ) plt.title(&quot;Monthly CO$_2$ emissions&quot;, fontsize=title_size) plt.ylabel(&quot;Tons&quot;, fontsize=30) xlocs, xlabels = plt.xticks() plt.xticks(xlocs, labels=[label.get_text()[:7] for label in xlabels], fontsize=11, ); plt.xlabel(&quot;&quot;) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;monthly_emissions.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Average energy cost . (100 * cost[&quot;Electricity&quot;] / usage[&quot;Electricity&quot;]).plot.bar( width=bin_width, fontsize=11, color=[&quot;#90cd97&quot;], figsize=figsize, legend=None, ) (100 * cost[&quot;Gas&quot;] / usage[&quot;Gas&quot;]).plot.bar( width=bin_width, color=[&quot;#8c8c8c&quot;], fontsize=11, figsize=figsize, ) plt.ylabel(&quot;¢/kWh&quot;, fontsize=30) xlocs, xlabels = plt.xticks() plt.xticks(xlocs, labels=[label.get_text()[:7] for label in xlabels]); ylocs, ylabels = plt.yticks() plt.yticks(ylocs, [int(y) for y in ylocs], fontsize=25) plt.plot(xlocs, 100 * (cost[&quot;Gas&quot;] + cost[&quot;Electricity&quot;]) / (usage[&quot;Gas&quot;] + usage[&quot;Electricity&quot;]), &quot;k&quot;) plt.title(&quot;Average energy cost&quot;, fontsize=title_size) plt.xlabel(&quot;&quot;); ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.ylim([0, None]) plt.legend( [&quot;Blended&quot;, &quot;Electricity&quot;, &quot;Gas&quot;], #bbox_to_anchor=(1, 1.04), fontsize=25 ) plt.savefig( os.path.join(&quot;images&quot;, &quot;average_energy_cost.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Annual CO$_2$ emissions . try: tco2[&quot;year&quot;] = [date.year for date in tco2.index] cost[&quot;year&quot;] = [date.year for date in cost.index] except: tco2[&quot;year&quot;] = [int(date[:4]) for date in tco2.index] cost[&quot;year&quot;] = [int(date[:4]) for date in cost.index] tco2[tco2[&quot;year&quot;] &gt; 2017].groupby(&quot;year&quot;).sum().plot.bar( stacked=True, fontsize=font_size, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], width=bin_width, figsize=figsize, legend=None, ) plt.title(&quot;Annual CO$_2$e emissions&quot;, fontsize=title_size) plt.ylabel(&quot;Tons&quot;, fontsize=ylabel_size) os.makedirs(&quot;images&quot;, exist_ok=True) plt.xlabel(&quot;&quot;) #plt.legend(bbox_to_anchor=(1, 1.04), fontsize=legend_size) plt.xticks(rotation=0) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;annual_co2_emissions.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Annual operating costs . cost[cost[&quot;year&quot;] &gt; 2017].groupby(&quot;year&quot;).sum().plot.bar( stacked=True, fontsize=font_size, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], width=bin_width, figsize=figsize, legend=None, ) plt.title(&quot;Annual operating costs&quot;, fontsize=title_size) os.makedirs(&quot;images&quot;, exist_ok=True) plt.xlabel(&quot;&quot;) #plt.legend(bbox_to_anchor=(1, 1.04), fontsize=legend_size) plt.xticks(rotation=0) plt.yticks(np.arange(0, 2500, step=500), [&quot;${:,}&quot;.format(tic) for tic in np.arange(0, 2500, step=500)], fontsize=30, ); ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;annual_operating_costs.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Comparing the 12 months before and after installing the HW heater . water_heater_install_date = &quot;2020-06-16&quot; after_idx = [i for i, date in enumerate(tco2.index) if arrow.get(date).naive &gt; arrow.get(water_heater_install_date).naive] before_idx = [i for i, date in enumerate(tco2.index) if arrow.get(date).naive &lt; arrow.get(water_heater_install_date).naive] . comparison = pd.DataFrame() comparison[&quot;tco2_Gas&quot;] = tco2[&quot;Gas&quot;].iloc[before_idx[-12:] + after_idx[:12]].copy() comparison[&quot;tco2_Electricity&quot;] = tco2[&quot;Electricity&quot;].iloc[before_idx[-12:] + after_idx[:12]].copy() comparison[&quot;tco2_Total&quot;] = comparison[&quot;tco2_Gas&quot;] + comparison[&quot;tco2_Electricity&quot;] comparison[&quot;cost_Gas&quot;] = cost[&quot;Gas&quot;].iloc[before_idx[-12:] + after_idx[:12]].copy() comparison[&quot;cost_Electricity&quot;] = cost[&quot;Electricity&quot;].iloc[before_idx[-12:] + after_idx[:12]].copy() comparison[&quot;cost_Total&quot;] = comparison[&quot;cost_Gas&quot;] + comparison[&quot;cost_Electricity&quot;] comparison[&quot;usage_kwh_Gas&quot;] = (gas[&quot;Gas Consumption&quot;] * GAS_KWH_PER_CUBIC_METER).iloc[before_idx[-12:] + after_idx[:12]].copy() comparison[&quot;usage_kwh_Electricity&quot;] = electricity[&quot;Total Consumption&quot;].iloc[before_idx[-12:] + after_idx[:12]].copy() comparison[&quot;usage_kwh_Total&quot;] = comparison[&quot;usage_kwh_Gas&quot;] + comparison[&quot;usage_kwh_Electricity&quot;] comparison[&quot;Average_rate_Gas&quot;] = comparison[&quot;cost_Gas&quot;] / comparison[&quot;usage_kwh_Gas&quot;] comparison[&quot;Average_rate_Electricity&quot;] = comparison[&quot;cost_Electricity&quot;] / comparison[&quot;usage_kwh_Electricity&quot;] comparison[&quot;Average_rate_Blended&quot;] = comparison[&quot;cost_Total&quot;] / comparison[&quot;usage_kwh_Total&quot;] comparison[&quot;Period&quot;] = [&quot;before&quot;]*12 + [&quot;after&quot;]*12 comparison.tail() . tco2_Gas tco2_Electricity tco2_Total cost_Gas cost_Electricity cost_Total usage_kwh_Gas usage_kwh_Electricity usage_kwh_Total Average_rate_Gas Average_rate_Electricity Average_rate_Blended Period . Date . 2021-01-31 0.597326 | 0.054458 | 0.651784 | 117.850000 | 104.421724 | 222.271724 | 3347.008478 | 707.251724 | 4054.260202 | 0.035211 | 0.147644 | 0.054824 | after | . 2021-02-28 0.566027 | 0.049591 | 0.615618 | 113.085000 | 81.990000 | 195.075000 | 3171.629699 | 644.039259 | 3815.668958 | 0.035655 | 0.127306 | 0.051125 | after | . 2021-03-31 0.377104 | 0.048041 | 0.425145 | 85.033226 | 87.777647 | 172.810873 | 2113.034884 | 623.912941 | 2736.947825 | 0.040242 | 0.140689 | 0.063140 | after | . 2021-04-30 0.188676 | 0.056138 | 0.244813 | 55.290000 | 108.196667 | 163.486667 | 1057.209900 | 729.061333 | 1786.271233 | 0.052298 | 0.148405 | 0.091524 | after | . 2021-05-31 0.091764 | 0.051550 | 0.143313 | 40.144375 | 101.753214 | 141.897589 | 514.182353 | 669.476071 | 1183.658424 | 0.078074 | 0.151989 | 0.119881 | after | . CO$_2$ reduced by 0.6t (-13%) . comparison.groupby(&quot;Period&quot;).sum().sort_index(ascending=False)[[&quot;tco2_Gas&quot;, &quot;tco2_Electricity&quot;]].plot.bar( width=.98, fontsize=30, stacked=True, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], figsize=(10, 6), ); plt.xticks(rotation=0) plt.xlabel(&quot;&quot;) plt.title(&quot;CO$_2$ emissions&quot;, fontsize=50) plt.yticks(range(6)) plt.ylabel(&quot;Tons&quot;, fontsize=25) delta = np.diff(comparison.groupby(&quot;Period&quot;)[&quot;tco2_Total&quot;].sum().sort_index(ascending=False))[0] delta_pct = 100 * delta / comparison[&quot;tco2_Total&quot;][:12].sum() sign = [&quot;+&quot; if delta &gt; 0 else &quot;&quot;][0] plt.text(0.8, 3.8, &quot;%s%.01ft n%s%.0f%%&quot; % (sign, delta, sign, delta_pct), fontsize=30, ) plt.legend(labels=[&quot;Gas&quot;, &quot;Electricty&quot;], bbox_to_anchor=(1.35, 1.04), fontsize=25 ) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;compare_emissions.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Operating cost up by $422 (+26%) . comparison.groupby(&quot;Period&quot;).sum().sort_index(ascending=False)[[&quot;cost_Gas&quot;, &quot;cost_Electricity&quot;]].plot.bar( width=.98, stacked=True, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], fontsize=30, figsize=(10, 6), legend=None, ) plt.xticks(rotation=0) plt.legend(labels=[&quot;Gas&quot;, &quot;Electricty&quot;], bbox_to_anchor=(1, 1.04), fontsize=25 ) plt.title(&quot;Operating cost&quot;, fontsize=50) plt.xlabel(&quot;&quot;) plt.yticks(np.arange(0, 3000, step=500), [&quot;${:,}&quot;.format(tic) for tic in np.arange(0, 3000, step=500)], fontsize=30, ); delta = np.diff(comparison.groupby(&quot;Period&quot;)[&quot;cost_Total&quot;].sum().sort_index(ascending=False))[0] delta_pct = 100 * delta / comparison[&quot;cost_Total&quot;][:12].sum() sign = [&quot;+&quot; if delta &gt; 0 else &quot;&quot;][0] plt.text(0.8, 1300, &quot;%s $%.0f n%s%.0f%%&quot; % (sign, delta, sign, delta_pct), fontsize=30, ) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;compare_operating_cost.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Normalized operating cost up by $293 (+13%) . fixed_rate_comparison = comparison.copy() fixed_rate_comparison[&quot;cost_Gas&quot;] = fixed_rate_comparison[&quot;usage_kwh_Gas&quot;] * fixed_rate_comparison[&quot;Average_rate_Gas&quot;].mean() fixed_rate_comparison[&quot;cost_Electricity&quot;] = fixed_rate_comparison[&quot;usage_kwh_Electricity&quot;] * fixed_rate_comparison[&quot;Average_rate_Electricity&quot;].mean() fixed_rate_comparison[&quot;cost_Total&quot;] = fixed_rate_comparison[&quot;cost_Gas&quot;] + fixed_rate_comparison[&quot;cost_Electricity&quot;] fixed_rate_comparison.groupby(&quot;Period&quot;).sum().sort_index(ascending=False)[[&quot;cost_Gas&quot;, &quot;cost_Electricity&quot;]].plot.bar( width=.98, stacked=True, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], fontsize=30, figsize=(10, 6), legend=None, ) plt.xticks(rotation=0) plt.legend(labels=[&quot;Gas&quot;, &quot;Electricty&quot;], bbox_to_anchor=(1, 1.04), fontsize=25 ) plt.title(&quot;Operating cost (normalized rates)&quot;, fontsize=30) plt.xlabel(&quot;&quot;) plt.yticks(np.arange(0, 3000, step=500), [&quot;${:,}&quot;.format(tic) for tic in np.arange(0, 3000, step=500)], fontsize=30, ); delta = np.diff(fixed_rate_comparison.groupby(&quot;Period&quot;)[&quot;cost_Total&quot;].sum().sort_index(ascending=False))[0] delta_pct = 100 * delta / fixed_rate_comparison[&quot;cost_Total&quot;][:12].sum() sign = [&quot;+&quot; if delta &gt; 0 else &quot;&quot;][0] plt.text(0.8, 1600, &quot;%s $%.0f n%s%.0f%%&quot; % (sign, delta, sign, delta_pct), fontsize=30, ) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;compare_operating_cost.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Daily energy use down by 2.1kWh (-3%) . (comparison.groupby(&quot;Period&quot;).sum().sort_index(ascending=False)[[&quot;usage_kwh_Gas&quot;, &quot;usage_kwh_Electricity&quot;]] / 365).plot.bar( width=.98, stacked=True, color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], fontsize=30, figsize=(10, 6), legend=None, ) plt.xticks(rotation=0) plt.legend(labels=[&quot;Gas&quot;, &quot;Electricty&quot;], bbox_to_anchor=(1, 1.04), fontsize=25 ) plt.title(&quot;Daily Energy Use&quot;, fontsize=50) plt.xlabel(&quot;&quot;) plt.ylabel(&quot;kWh/day&quot;, fontsize=25) # plt.yticks(np.arange(0, 2500, step=500), # [&quot;${:,}&quot;.format(tic) for tic in np.arange(0, 2500, step=500)], # fontsize=30, # ); delta = np.diff(comparison.groupby(&quot;Period&quot;).sum()[&quot;usage_kwh_Total&quot;].sort_index(ascending=False))[0] delta_pct = 100 * delta / comparison.usage_kwh_Total[:12].sum() sign = [&quot;+&quot; if delta &gt; 0 else &quot;&quot;][0] plt.text(0.7, 50, &quot;%s%.1fkWh n%s%.0f%%&quot; % (sign, delta / 365, sign, delta_pct), fontsize=30, ) plt.yticks(np.arange(0, 80, step=10), [&quot;{:,}&quot;.format(tic) for tic in np.arange(0, 80, step=10)], fontsize=30, ); delta = np.diff(comparison.groupby(&quot;Period&quot;).sum().sort_index(ascending=False)[&quot;usage_kwh_Electricity&quot;])[0] delta_pct = 100 * delta / comparison.groupby(&quot;Period&quot;).sum().sort_index(ascending=False)[&quot;usage_kwh_Electricity&quot;][0] sign = [&quot;+&quot; if delta &gt; 0 else &quot;&quot;][0] plt.text(1.8, 20, &quot;Electricity use n↑%.0f kWh/day n(%s%.1f%%)&quot; % (delta / 365, sign, delta_pct), fontsize=30, ) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;compare_usage.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . What units/timescale makes sense here? Daily seems to strike the right balance of immediate, short-term feedback that is meaningful (averages out hourly &quot;noise&quot;). . Blended rate up by 1.2&#162; (+14%) . (100 * (comparison.groupby(&quot;Period&quot;).mean().sort_index(ascending=False)[&quot;Average_rate_Blended&quot;])).plot.bar( width=.98, stacked=True, #color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], fontsize=30, figsize=(10, 6), legend=None, ) plt.ylabel(&quot;1/kWh&quot;, fontsize=30) plt.xticks(rotation=0) plt.title(&quot;Blended Rate&quot;, fontsize=50) plt.xlabel(&quot;&quot;) plt.yticks(np.arange(0, 10, step=2), [&quot;{:,}¢&quot;.format(tic) for tic in np.arange(0, 10, step=2)], fontsize=30, ); delta = 100 * np.diff(comparison.groupby(&quot;Period&quot;)[&quot;Average_rate_Blended&quot;].mean().sort_index(ascending=False))[0] sign = [&quot;+&quot; if delta &gt; 0 else &quot;&quot;][0] plt.text(0.8, 4.5, &quot;%s%.1f¢ n%s%.0f%%&quot; % (sign, delta, sign, (delta / comparison.iloc[:12][&#39;Average_rate_Blended&#39;].mean())), fontsize=30, ) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;compare_usage.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . The blended rate went up because we shifted some of our energy use (HW heating) from lower priced gas to higher priced electricity and because the gas rate went up by 25%. . Gas rate up by 1.5&#162; (+25%) . (100 * (comparison.groupby(&quot;Period&quot;).mean().sort_index(ascending=False)[&quot;Average_rate_Gas&quot;])).plot.bar( width=.98, stacked=True, #color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], fontsize=30, figsize=(10, 6), legend=None, ) plt.ylabel(&quot;1/kWh&quot;, fontsize=30) plt.xticks(rotation=0) plt.title(&quot;Gas Rate&quot;, fontsize=50) plt.xlabel(&quot;&quot;) plt.yticks(np.arange(0, 10, step=2), [&quot;{:,}¢&quot;.format(tic) for tic in np.arange(0, 10, step=2)], fontsize=30, ); delta = 100 * np.diff(comparison.groupby(&quot;Period&quot;)[&quot;Average_rate_Gas&quot;].mean().sort_index(ascending=False))[0] sign = [&quot;+&quot; if delta &gt; 0 else &quot;&quot;][0] plt.text(0.8, 3.5, &quot;%s%.1f¢ n%s%.0f%%&quot; % (sign, delta, sign, (delta / comparison.iloc[:12][&#39;Average_rate_Gas&#39;].mean())), fontsize=30, ) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;compare_gas_rate.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Electricity rate down by 1.8&#162; (-11%) . (100 * (comparison.groupby(&quot;Period&quot;).mean().sort_index(ascending=False)[&quot;Average_rate_Electricity&quot;])).plot.bar( width=.98, stacked=True, #color=[&quot;#8c8c8c&quot;, &quot;#90cd97&quot;], fontsize=30, figsize=(10, 6), legend=None, ) plt.ylabel(&quot;1/kWh&quot;, fontsize=30) plt.xticks(rotation=0) plt.title(&quot;Electricity Rate&quot;, fontsize=50) plt.xlabel(&quot;&quot;) #ylocs, ylabels = plt.yticks() ylocs = range(0,20,5) plt.yticks(ylocs, [&quot;%d¢&quot; % tic for tic in ylocs], fontsize=30, ); delta = 100 * np.diff(comparison.groupby(&quot;Period&quot;)[&quot;Average_rate_Electricity&quot;].mean().sort_index(ascending=False))[0] sign = [&quot;+&quot; if delta &gt; 0 else &quot;&quot;][0] plt.text(0.8, 6, &quot;%s%.1f¢ n%s%.0f%%&quot; % (sign, delta, sign, (delta / comparison.iloc[:12][&#39;Average_rate_Electricity&#39;].mean())), fontsize=30, ) ax = plt.gca() ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) plt.savefig( os.path.join(&quot;images&quot;, &quot;compare_electricity_rate.svg&quot;), bbox_inches=bbox_inches, transparent=transparent, facecolor=facecolor, ) . Cost of energy . When trying to predict future costs, a major component will be the cost of energy (best represented by the Levelized Cost of Energy; LCOE). LCOE solar in various countries is between $20-50/MWh (2-5¢/kWh) in 2021 (note that this is utility scale; rooftop residential numbers will be slightly higher and need to account for storage or grid backup). In the near future (maybe even now?), the LCOE is likely to be cheaper for rooftop generated solar versus natural gas, making heat pumps much more attractive. . This seems to be inline with the US gov SunShot goals. . .",
            "url": "https://ryanfobel.github.io/digital-notebook/climate/jupyter/2022/01/27/case_study.html",
            "relUrl": "/climate/jupyter/2022/01/27/case_study.html",
            "date": " • Jan 27, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ryanfobel.github.io/digital-notebook/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ryanfobel.github.io/digital-notebook/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}